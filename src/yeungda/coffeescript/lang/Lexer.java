/* The following code was generated by JFlex 1.4.3 on 3/27/10 5:30 PM */

package yeungda.coffeescript.lang;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/27/10 5:30 PM from the specification file
 * <tt>/Users/dyeung/Projects/coffeescript/src/yeungda/coffeescript/lang/lexer.flex</tt>
 */
class Lexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int REGULAR_EXPRESSION = 8;
  public static final int VERB = 10;
  public static final int REGULAR_EXPRESSION_FLAG = 12;
  public static final int HEREDOCS = 18;
  public static final int DOUBLE_QUOTE_STRING = 4;
  public static final int SINGLE_QUOTE_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int NOUN = 2;
  public static final int JAVASCRIPT = 16;
  public static final int NOUN_OR_VERB = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\20\2\0\1\27\22\0\1\1\1\62\1\24\1\21"+
    "\1\2\1\15\1\15\1\25\1\65\1\63\1\15\1\16\1\64\1\12"+
    "\1\10\1\30\1\4\11\3\1\23\1\61\1\62\1\17\1\22\1\15"+
    "\1\13\6\7\11\2\1\60\7\2\1\6\2\2\1\66\1\26\1\67"+
    "\1\0\1\57\1\34\1\36\1\53\1\35\1\40\1\11\1\41\1\54"+
    "\1\52\1\47\1\2\1\70\1\43\1\55\1\46\1\45\1\56\1\2"+
    "\1\51\1\37\1\44\1\42\1\50\1\14\1\5\1\33\1\2\1\31"+
    "\1\15\1\32\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\3\0\1\2\1\3\1\4\2\5\1\4"+
    "\1\2\1\6\1\4\1\7\1\10\1\11\1\12\1\7"+
    "\1\13\1\14\1\4\1\15\17\4\1\16\1\17\1\20"+
    "\1\21\1\22\2\4\1\23\2\24\1\25\5\4\1\26"+
    "\1\27\1\2\1\26\1\2\1\30\1\31\1\2\1\32"+
    "\1\33\1\2\3\34\1\35\1\34\1\35\7\2\1\36"+
    "\1\37\1\1\2\4\1\40\1\41\2\42\3\0\3\4"+
    "\1\43\2\4\2\0\10\4\1\44\11\4\1\45\1\46"+
    "\1\45\2\4\1\46\1\45\13\4\1\47\1\50\1\51"+
    "\1\32\1\34\5\0\1\45\1\0\1\45\1\1\1\4"+
    "\1\45\1\0\2\5\1\0\1\5\7\4\1\52\30\4"+
    "\1\32\3\0\1\1\1\4\1\53\21\4\1\32\1\0"+
    "\1\1\12\4\1\32\1\0\14\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u023a\0\u03c9\0\u0402\0\u043b\0\u023a\0\u0474\0\u023a"+
    "\0\u023a\0\u023a\0\u04ad\0\u023a\0\u04e6\0\u051f\0\u0558\0\u0591"+
    "\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759"+
    "\0\u0792\0\u07cb\0\u0804\0\u023a\0\u023a\0\u023a\0\u023a\0\u023a"+
    "\0\u083d\0\u0876\0\u0390\0\u0402\0\u023a\0\u023a\0\u08af\0\u08e8"+
    "\0\u0921\0\u095a\0\u0993\0\u09cc\0\u023a\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u023a\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u023a"+
    "\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95"+
    "\0\u0dce\0\u0e07\0\u0e40\0\u023a\0\u023a\0\u0e79\0\u0eb2\0\u0eeb"+
    "\0\u0f24\0\u023a\0\u023a\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u023a\0\u10ec\0\u1125\0\u0402\0\u115e\0\u1197"+
    "\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326\0\u02ac"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u02ac\0\u02ac\0\u1599\0\u15d2\0\u160b\0\u1644"+
    "\0\u167d\0\u16b6\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c"+
    "\0\u1845\0\u187e\0\u18b7\0\u023a\0\u023a\0\u023a\0\u18f0\0\u1929"+
    "\0\u1962\0\u199b\0\u0dce\0\u19d4\0\u1a0d\0\u023a\0\u1a46\0\u1a7f"+
    "\0\u1ab8\0\u1af1\0\u167d\0\u1b2a\0\u1b63\0\u1b9c\0\u1b9c\0\u1008"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u023a"+
    "\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb"+
    "\0\u160b\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a"+
    "\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u023a\0\u23d9"+
    "\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1"+
    "\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u2769"+
    "\0\u27a2\0\u27db\0\u023a\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8"+
    "\0\u2931\0\u296a\0\u29a3\0\u29dc\0\u2a15\0\u023a\0\u2a4e\0\u2a87"+
    "\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16\0\u2c4f"+
    "\0\u2c88\0\u2cc1\0\u2cfa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\1\17\3\15\1\13\1\20"+
    "\1\21\1\22\1\23\2\13\1\21\1\24\1\25\2\13"+
    "\1\26\1\27\1\13\1\30\1\13\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\15\1\52"+
    "\3\15\1\53\1\15\1\54\1\13\1\55\1\13\1\56"+
    "\1\57\1\60\1\15\1\13\1\14\1\15\1\16\1\17"+
    "\3\15\1\13\1\61\1\21\1\22\1\62\2\13\1\63"+
    "\1\64\1\25\2\13\1\26\1\27\1\13\1\65\1\66"+
    "\1\31\1\32\1\33\1\13\1\67\1\36\1\37\1\70"+
    "\1\71\1\42\1\15\1\44\1\45\1\72\1\73\1\15"+
    "\1\51\1\15\1\52\5\15\2\13\1\55\1\13\1\56"+
    "\1\57\1\60\1\15\20\74\1\30\3\74\1\75\1\74"+
    "\1\76\1\30\41\74\20\77\1\30\4\77\1\75\1\100"+
    "\1\30\41\77\20\101\1\102\5\101\1\103\1\102\1\104"+
    "\40\101\1\13\1\14\6\13\1\105\1\106\1\107\1\22"+
    "\1\13\1\110\1\111\1\112\1\64\1\25\1\113\1\114"+
    "\3\13\1\65\1\110\5\13\1\115\2\13\1\116\1\117"+
    "\1\13\1\120\1\121\1\122\1\123\12\13\1\113\1\124"+
    "\1\125\1\56\1\57\1\60\21\13\1\0\12\13\1\126"+
    "\13\13\1\126\4\13\2\126\14\13\1\14\1\15\1\16"+
    "\1\17\3\15\1\105\1\61\1\107\1\22\1\62\1\110"+
    "\1\111\1\112\1\64\1\25\1\113\1\114\1\26\1\27"+
    "\1\13\1\65\1\110\1\31\1\32\1\33\1\13\1\67"+
    "\1\36\1\37\1\70\1\71\1\42\1\15\1\127\1\45"+
    "\1\72\1\130\1\15\1\51\1\15\1\52\5\15\1\13"+
    "\1\113\1\124\1\125\1\56\1\57\1\60\1\15\34\131"+
    "\1\132\34\131\20\133\1\30\4\133\1\134\1\133\1\30"+
    "\41\133\72\0\1\14\17\0\1\25\51\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\24\15\7\0"+
    "\1\15\3\0\2\16\3\0\1\135\1\136\62\0\2\16"+
    "\2\137\1\0\1\135\1\136\61\0\3\15\1\140\2\15"+
    "\1\0\1\15\2\0\1\15\16\0\1\15\1\0\6\15"+
    "\1\141\2\15\1\142\12\15\7\0\1\15\22\0\1\143"+
    "\50\0\6\15\1\0\1\15\2\0\1\15\16\0\1\15"+
    "\1\0\12\15\1\144\2\15\1\145\6\15\7\0\1\15"+
    "\1\0\1\146\17\0\1\25\47\0\20\25\1\146\50\25"+
    "\25\0\1\147\45\0\6\15\1\0\1\150\2\0\1\15"+
    "\16\0\1\15\1\0\24\15\7\0\1\15\2\0\6\15"+
    "\1\0\1\15\2\0\1\15\16\0\1\15\1\0\1\15"+
    "\1\151\4\15\1\152\1\15\1\153\13\15\7\0\1\15"+
    "\2\0\6\15\1\0\1\15\2\0\1\15\16\0\1\15"+
    "\1\0\11\15\1\154\12\15\7\0\1\15\2\0\6\15"+
    "\1\0\1\15\2\0\1\155\16\0\1\15\1\0\5\15"+
    "\1\156\16\15\7\0\1\15\2\0\6\15\1\0\1\157"+
    "\2\0\1\15\16\0\1\15\1\0\10\15\1\160\13\15"+
    "\7\0\1\15\2\0\6\15\1\0\1\15\2\0\1\15"+
    "\16\0\1\15\1\0\1\15\1\161\3\15\1\162\2\15"+
    "\1\163\1\15\1\164\11\15\7\0\1\15\2\0\6\15"+
    "\1\0\1\15\2\0\1\15\16\0\1\15\1\0\11\15"+
    "\1\165\12\15\7\0\1\15\2\0\6\15\1\0\1\166"+
    "\2\0\1\15\16\0\1\15\1\0\24\15\7\0\1\15"+
    "\2\0\6\15\1\0\1\15\2\0\1\15\16\0\1\167"+
    "\1\0\14\15\1\170\1\171\6\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\4\15\1\172\4\15\1\173\2\15\1\174\7\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\175\2\0\1\15\16\0"+
    "\1\15\1\0\1\15\1\176\6\15\1\177\13\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\2\15\1\200\1\15\1\174\4\15\1\201"+
    "\6\15\1\202\3\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\1\15\1\203"+
    "\6\15\1\204\13\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\205\2\0\1\15\16\0\1\15\1\0\24\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\174\1\0\14\15\1\206\7\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\22\15\1\207\1\15\7\0\1\15\2\0\3\15\1\210"+
    "\2\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\6\15\1\141\15\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\15\15\1\145"+
    "\6\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\1\15\1\211\4\15\1\152"+
    "\1\15\1\212\13\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\213\2\0\1\15\16\0\1\15\1\0\24\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\1\15\1\161\6\15\1\163\1\15\1\164"+
    "\11\15\7\0\1\15\2\0\6\15\1\0\1\175\2\0"+
    "\1\15\16\0\1\15\1\0\10\15\1\177\13\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\2\15\1\200\1\15\1\174\4\15\1\201"+
    "\12\15\7\0\1\15\20\74\1\0\3\74\1\0\1\74"+
    "\2\0\41\74\20\214\1\0\3\214\1\215\1\214\1\215"+
    "\17\214\1\215\22\214\20\77\1\0\4\77\3\0\41\77"+
    "\20\214\1\0\4\214\2\215\17\214\1\215\22\214\20\101"+
    "\1\0\5\101\3\0\40\101\20\216\1\0\50\216\33\0"+
    "\1\217\13\0\1\217\4\0\2\217\23\0\1\220\123\0"+
    "\1\221\37\0\1\110\7\0\1\143\64\0\1\110\71\0"+
    "\1\110\2\0\1\143\65\0\1\110\74\0\1\110\113\0"+
    "\1\222\67\0\1\223\71\0\1\224\74\0\1\225\67\0"+
    "\1\226\64\0\1\227\62\0\1\230\1\0\1\226\4\0"+
    "\1\226\55\0\1\231\13\0\1\231\4\0\2\231\15\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\167\1\0"+
    "\14\15\1\170\1\232\6\15\7\0\1\15\2\0\6\15"+
    "\1\0\1\15\2\0\1\15\16\0\1\15\1\0\2\15"+
    "\1\200\1\15\1\174\4\15\1\233\12\15\7\0\1\15"+
    "\34\131\1\0\34\131\25\0\1\234\46\0\2\235\67\0"+
    "\2\236\5\0\1\237\3\0\1\237\55\0\2\240\2\0"+
    "\1\240\1\0\1\240\23\0\2\240\1\0\2\240\11\0"+
    "\1\240\17\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\7\15\1\241\11\15\1\242\2\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\2\15\1\243\21\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\5\15\1\244\16\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\7\15\1\245"+
    "\14\15\7\0\1\15\2\0\6\15\1\0\1\246\2\0"+
    "\1\15\16\0\1\15\1\0\12\15\1\247\11\15\7\0"+
    "\1\15\25\0\1\250\45\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\2\15\1\173\21\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\2\15\1\251\4\15\1\252\14\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\1\15\1\253\22\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\11\15\1\254\12\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\3\15\1\174"+
    "\20\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\12\15\1\211\11\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\21\15\1\255\2\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\4\15\1\256\1\15\1\257\7\15\1\260\5\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\6\15\1\261\15\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\11\15\1\262\12\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\14\15\1\174"+
    "\7\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\11\15\1\263\12\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\6\15\1\264\15\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\7\15\1\160\14\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\21\15\1\265"+
    "\2\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\174\1\0\5\15\1\266\16\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\14\15\1\267\7\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\4\15\1\173\17\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\174\16\0\1\15\1\0\24\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\7\15\1\270\14\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\7\15\1\174\14\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\11\15\1\271"+
    "\12\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\2\15\1\272\21\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\21\15\1\242\2\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\14\15\1\160\7\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\12\15\1\273"+
    "\11\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\7\15\1\274\14\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\275\2\0\1\15\16\0"+
    "\1\15\1\0\24\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\276\2\0\1\15\16\0\1\15\1\0\15\15\1\277"+
    "\6\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\7\15\1\241\14\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\7\15\1\252\14\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\11\15\1\300\12\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\6\15\1\257"+
    "\15\15\7\0\1\15\33\0\1\301\13\0\1\301\4\0"+
    "\2\301\23\0\1\110\117\0\1\302\71\0\1\226\73\0"+
    "\1\303\36\0\1\304\123\0\1\226\72\0\1\227\55\0"+
    "\1\305\13\0\1\305\4\0\2\305\15\0\6\15\1\0"+
    "\1\306\2\0\1\15\16\0\1\15\1\0\14\15\1\267"+
    "\7\15\7\0\1\15\25\0\1\307\46\0\2\235\4\0"+
    "\1\136\62\0\2\236\66\0\6\15\1\0\1\310\2\0"+
    "\1\15\16\0\1\15\1\0\24\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\10\15\1\311\13\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\174\2\0\1\15\16\0\1\15\1\0\24\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\20\15\1\160\3\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\15\15\1\160\6\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\11\15\1\174"+
    "\2\15\1\243\7\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\6\15\1\243"+
    "\15\15\7\0\1\15\2\0\6\15\1\0\1\160\2\0"+
    "\1\15\16\0\1\15\1\0\24\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\1\312\23\15\7\0\1\15\2\0\6\15\1\0\1\15"+
    "\2\0\1\15\16\0\1\15\1\0\2\15\1\313\21\15"+
    "\7\0\1\15\2\0\6\15\1\0\1\15\2\0\1\15"+
    "\16\0\1\15\1\0\2\15\1\166\4\15\1\314\14\15"+
    "\7\0\1\15\2\0\6\15\1\0\1\163\2\0\1\15"+
    "\16\0\1\15\1\0\24\15\7\0\1\15\2\0\6\15"+
    "\1\0\1\15\2\0\1\15\16\0\1\15\1\0\1\15"+
    "\1\315\22\15\7\0\1\15\2\0\6\15\1\0\1\316"+
    "\2\0\1\15\16\0\1\15\1\0\24\15\7\0\1\15"+
    "\2\0\6\15\1\0\1\15\2\0\1\15\16\0\1\15"+
    "\1\0\5\15\1\317\16\15\7\0\1\15\2\0\6\15"+
    "\1\0\1\15\2\0\1\15\16\0\1\15\1\0\2\15"+
    "\1\266\21\15\7\0\1\15\2\0\6\15\1\0\1\15"+
    "\2\0\1\15\16\0\1\15\1\0\1\320\23\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\1\15\1\321\22\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\253\2\0\1\15\16\0\1\15\1\0"+
    "\24\15\7\0\1\15\2\0\6\15\1\0\1\322\2\0"+
    "\1\15\16\0\1\15\1\0\24\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\173\2\0\1\15\16\0\1\15\1\0"+
    "\24\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\10\15\1\175\13\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\12\15\1\323\11\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\7\15\1\324\14\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\3\15\1\160"+
    "\20\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\5\15\1\325\16\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\1\15\1\326\22\15\7\0\1\15\2\0"+
    "\3\15\1\327\2\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\24\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\1\15\1\330"+
    "\22\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\7\15\1\314\14\15\7\0"+
    "\1\15\33\0\1\331\13\0\1\331\4\0\2\331\24\0"+
    "\1\226\70\0\1\332\125\0\1\226\55\0\1\333\13\0"+
    "\1\333\4\0\2\333\15\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\11\15\1\174\12\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\11\15\1\334\12\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\14\15\1\166\7\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\15\15\1\174"+
    "\6\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\2\15\1\174\21\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\12\15\1\335\11\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\5\15\1\336\16\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\7\15\1\243"+
    "\14\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\17\15\1\337\4\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\7\15\1\340\14\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\6\15\1\341\15\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\10\15\1\342"+
    "\13\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\13\15\1\251\10\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\1\15\1\343\22\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\14\15\1\306\7\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\24\15\7\0"+
    "\1\174\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\7\15\1\344\14\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\2\15\1\345\21\15\7\0\1\15\33\0\1\346\13\0"+
    "\1\346\4\0\2\346\52\0\1\347\33\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\3\15\1\313"+
    "\20\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\11\15\1\350\12\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\6\15\1\166\15\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\17\15\1\351\4\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\12\15\1\352"+
    "\11\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\6\15\1\353\15\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\4\15\1\174\17\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\11\15\1\354\12\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\355\2\0\1\15\16\0\1\15\1\0\24\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\23\15\1\356\7\0\1\15\37\0\1\226"+
    "\33\0\6\15\1\0\1\15\2\0\1\15\16\0\1\15"+
    "\1\0\5\15\1\243\16\15\7\0\1\15\2\0\6\15"+
    "\1\0\1\203\2\0\1\15\16\0\1\15\1\0\24\15"+
    "\7\0\1\15\2\0\6\15\1\0\1\15\2\0\1\15"+
    "\16\0\1\15\1\0\10\15\1\357\13\15\7\0\1\15"+
    "\2\0\6\15\1\0\1\15\2\0\1\15\16\0\1\174"+
    "\1\0\24\15\7\0\1\15\2\0\6\15\1\0\1\15"+
    "\2\0\1\15\16\0\1\15\1\0\1\265\23\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\11\15\1\360\12\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\14\15\1\361\7\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\11\15\1\160"+
    "\12\15\7\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\3\15\1\362\20\15\7\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\10\15\1\363\13\15\7\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\2\15\1\160\21\15\7\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\21\15\1\160"+
    "\2\15\7\0\1\15";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11571];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\3\0\1\11\6\1\1\11\3\1\1\11"+
    "\1\1\3\11\1\1\1\11\17\1\5\11\4\1\2\11"+
    "\6\1\1\11\4\1\1\11\5\1\1\11\13\1\2\11"+
    "\4\1\2\11\1\1\3\0\3\1\1\11\2\1\2\0"+
    "\44\1\3\11\2\1\5\0\1\11\1\0\4\1\1\0"+
    "\2\1\1\0\10\1\1\11\31\1\3\0\2\1\1\11"+
    "\22\1\1\0\1\11\12\1\1\11\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[243];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { return Tokens.RESERVED_WORD;
          }
        case 44: break;
        case 18: 
          { yybegin(VERB); return Tokens.BRACKET;
          }
        case 45: break;
        case 35: 
          { yybegin(NOUN); return Tokens.FUNCTION;
          }
        case 46: break;
        case 25: 
          { yybegin(YYINITIAL); return Tokens.BAD_CHARACTER;
          }
        case 47: break;
        case 2: 
          { yybegin(YYINITIAL);   return Tokens.BAD_CHARACTER;
          }
        case 48: break;
        case 30: 
          { return Tokens.PARENTHESIS;
          }
        case 49: break;
        case 21: 
          { yybegin(REGULAR_EXPRESSION); return Tokens.REGULAR_EXPRESSION;
          }
        case 50: break;
        case 34: 
          { return Tokens.HEREDOCS;
          }
        case 51: break;
        case 26: 
          { final int length = yytext().length();
        if (length > 1) {
            yypushback(length -1);
            yybegin(REGULAR_EXPRESSION_FLAG);
        } else {
            yybegin(VERB);
        }
        return Tokens.REGULAR_EXPRESSION;
          }
        case 52: break;
        case 42: 
          { yybegin(HEREDOCS); return Tokens.HEREDOCS;
          }
        case 53: break;
        case 24: 
          { return Tokens.REGULAR_EXPRESSION;
          }
        case 54: break;
        case 23: 
          { yybegin(VERB); return Tokens.STRING;
          }
        case 55: break;
        case 13: 
          { yybegin(JAVASCRIPT); return Tokens.JAVASCRIPT;
          }
        case 56: break;
        case 1: 
          { yybegin(VERB); return Tokens.REGULAR_EXPRESSION_FLAG;
          }
        case 57: break;
        case 22: 
          { return Tokens.STRING;
          }
        case 58: break;
        case 43: 
          { yybegin(VERB);  return Tokens.HEREDOCS;
          }
        case 59: break;
        case 39: 
          { return Tokens.BAD_CHARACTER;
          }
        case 60: break;
        case 4: 
          { yybegin(NOUN_OR_VERB); return Tokens.IDENTIFIER;
          }
        case 61: break;
        case 11: 
          { yybegin(NOUN); return Tokens.BRACE;
          }
        case 62: break;
        case 7: 
          { return Tokens.LINE_TERMINATOR;
          }
        case 63: break;
        case 29: 
          { yybegin(NOUN); return Tokens.ASSIGNMENT;
          }
        case 64: break;
        case 33: 
          { yybegin(YYINITIAL); return Tokens.JAVASCRIPT;
          }
        case 65: break;
        case 6: 
          { yybegin(NOUN); return Tokens.ACCESSOR;
          }
        case 66: break;
        case 28: 
          { yybegin(NOUN); return Tokens.OPERATOR;
          }
        case 67: break;
        case 15: 
          { yybegin(VERB); return Tokens.PARENTHESIS;
          }
        case 68: break;
        case 8: 
          { return Tokens.COMMENT;
          }
        case 69: break;
        case 27: 
          { yybegin(NOUN); return Tokens.DOT;
          }
        case 70: break;
        case 41: 
          { return Tokens.REGULAR_EXPRESSION_LITERAL;
          }
        case 71: break;
        case 14: 
          { return Tokens.SEMI_COLON;
          }
        case 72: break;
        case 12: 
          { yybegin(VERB); return Tokens.BRACE;
          }
        case 73: break;
        case 38: 
          { yybegin(VERB); return Tokens.BOOLEAN;
          }
        case 74: break;
        case 20: 
          { yybegin(YYINITIAL); return Tokens.LINE_TERMINATOR;
          }
        case 75: break;
        case 19: 
          { return Tokens.ASSIGNMENT;
          }
        case 76: break;
        case 5: 
          { yybegin(VERB); return Tokens.NUMBER;
          }
        case 77: break;
        case 10: 
          { yybegin(SINGLE_QUOTE_STRING); return Tokens.STRING;
          }
        case 78: break;
        case 37: 
          { yybegin(NOUN); return Tokens.KEYWORD;
          }
        case 79: break;
        case 17: 
          { yybegin(NOUN); return Tokens.BRACKET;
          }
        case 80: break;
        case 31: 
          { yybegin(NOUN); return Tokens.COMMA;
          }
        case 81: break;
        case 40: 
          { return Tokens.STRING_LITERAL;
          }
        case 82: break;
        case 3: 
          { return Tokens.WHITESPACE;
          }
        case 83: break;
        case 16: 
          { yybegin(NOUN); return Tokens.PARENTHESIS;
          }
        case 84: break;
        case 9: 
          { yybegin(DOUBLE_QUOTE_STRING); return Tokens.STRING;
          }
        case 85: break;
        case 32: 
          { return Tokens.JAVASCRIPT;
          }
        case 86: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
