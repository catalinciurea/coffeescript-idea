/* The following code was generated by JFlex 1.4.3 on 3/26/10 5:59 PM */

package yeungda.coffeescript.lang;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/26/10 5:59 PM from the specification file
 * <tt>/Users/dyeung/Projects/coffeescript/src/yeungda/coffeescript/lang/lexer.flex</tt>
 */
class Lexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SINGLE_QUOTE_STRING = 6;
  public static final int VERB = 10;
  public static final int NOUN = 2;
  public static final int REGULAR_EXPRESSION_FLAG = 12;
  public static final int YYINITIAL = 0;
  public static final int NOUN_OR_VERB = 14;
  public static final int REGULAR_EXPRESSION = 8;
  public static final int DOUBLE_QUOTE_STRING = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\20\2\0\1\27\22\0\1\1\1\61\1\24\1\21"+
    "\1\2\1\15\1\15\1\25\1\64\1\62\1\15\1\16\1\63\1\12"+
    "\1\10\1\30\1\4\11\3\1\23\1\60\1\61\1\17\1\22\1\15"+
    "\1\13\6\7\11\2\1\57\7\2\1\6\2\2\1\65\1\26\1\66"+
    "\1\0\1\56\1\0\1\35\1\52\1\34\1\37\1\11\1\40\1\53"+
    "\1\51\1\46\1\2\1\67\1\42\1\54\1\45\1\44\1\55\1\2"+
    "\1\50\1\36\1\43\1\41\1\47\1\14\1\5\1\33\1\2\1\31"+
    "\1\15\1\32\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\0\1\2\1\3\1\4\2\5\1\4"+
    "\1\2\1\6\1\4\1\7\1\10\1\11\1\12\1\7"+
    "\1\13\1\14\20\4\1\15\1\16\1\17\1\20\1\21"+
    "\2\4\1\22\2\23\1\24\5\4\1\25\1\26\1\2"+
    "\1\25\1\2\1\27\1\30\1\2\1\31\1\32\1\2"+
    "\3\33\1\34\1\33\1\34\7\2\1\35\1\36\1\1"+
    "\2\4\3\0\3\4\1\37\2\4\1\0\10\4\1\40"+
    "\11\4\1\41\1\42\1\41\2\4\1\42\1\41\13\4"+
    "\1\43\1\44\1\45\1\31\6\0\1\41\1\0\1\41"+
    "\1\1\1\4\1\41\2\5\1\0\1\5\37\4\1\31"+
    "\3\0\1\1\22\4\1\31\1\0\1\1\12\4\1\31"+
    "\1\0\14\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u01c0"+
    "\0\u0348\0\u0380\0\u03b8\0\u01c0\0\u01c0\0\u01c0\0\u01c0\0\u01c0"+
    "\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508\0\u0540\0\u0578"+
    "\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8\0\u0700\0\u0738"+
    "\0\u01c0\0\u01c0\0\u01c0\0\u01c0\0\u01c0\0\u0770\0\u07a8\0\u01c0"+
    "\0\u0380\0\u01c0\0\u01c0\0\u07e0\0\u0818\0\u0850\0\u0888\0\u08c0"+
    "\0\u08f8\0\u01c0\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u01c0\0\u0a10"+
    "\0\u0a48\0\u0a80\0\u0ab8\0\u0af0\0\u01c0\0\u0b28\0\u0b60\0\u0b60"+
    "\0\u0b98\0\u0bd0\0\u0c08\0\u0c40\0\u0c78\0\u0cb0\0\u0ce8\0\u0d20"+
    "\0\u01c0\0\u01c0\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0e38\0\u0e70"+
    "\0\u0ea8\0\u0ee0\0\u0f18\0\u01c0\0\u0f50\0\u0f88\0\u0380\0\u0fc0"+
    "\0\u0ff8\0\u1030\0\u1068\0\u10a0\0\u10d8\0\u1110\0\u1148\0\u0230"+
    "\0\u1180\0\u11b8\0\u11f0\0\u1228\0\u1260\0\u1298\0\u12d0\0\u1308"+
    "\0\u1340\0\u1378\0\u0230\0\u0230\0\u13b0\0\u13e8\0\u1420\0\u1458"+
    "\0\u1490\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618"+
    "\0\u1650\0\u1688\0\u16c0\0\u01c0\0\u01c0\0\u01c0\0\u16f8\0\u1730"+
    "\0\u1768\0\u17a0\0\u0cb0\0\u17d8\0\u1810\0\u01c0\0\u1848\0\u1880"+
    "\0\u18b8\0\u18f0\0\u1490\0\u1928\0\u1960\0\u1960\0\u0e70\0\u1998"+
    "\0\u19d0\0\u1a08\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u1b20\0\u1b58"+
    "\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8\0\u1ce0\0\u1d18"+
    "\0\u1d50\0\u1d88\0\u1dc0\0\u1df8\0\u1e30\0\u1e68\0\u1420\0\u1ea0"+
    "\0\u1ed8\0\u1f10\0\u1f48\0\u1f80\0\u1fb8\0\u1ff0\0\u2028\0\u2060"+
    "\0\u2098\0\u20d0\0\u2108\0\u2140\0\u2178\0\u21b0\0\u21e8\0\u2220"+
    "\0\u2258\0\u2290\0\u22c8\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0"+
    "\0\u2418\0\u2450\0\u2488\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u01c0"+
    "\0\u25a0\0\u25d8\0\u2610\0\u2648\0\u2680\0\u26b8\0\u26f0\0\u2728"+
    "\0\u2760\0\u2798\0\u01c0\0\u27d0\0\u2808\0\u2840\0\u2878\0\u28b0"+
    "\0\u28e8\0\u2920\0\u2958\0\u2990\0\u29c8\0\u2a00\0\u2a38\0\u2a70";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\3\13\1\11\1\16"+
    "\1\17\1\20\1\21\3\11\1\22\1\23\2\11\1\24"+
    "\1\25\1\11\1\26\1\11\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\13\1\47\3\13\1\50"+
    "\1\13\1\51\1\11\1\52\1\11\1\53\1\54\1\55"+
    "\1\13\1\11\1\12\1\13\1\14\1\15\3\13\1\11"+
    "\1\56\1\17\1\20\1\57\2\11\1\60\1\61\1\23"+
    "\2\11\1\24\1\25\1\11\1\62\1\63\1\27\1\30"+
    "\1\31\1\64\1\33\1\34\1\65\1\66\1\37\1\13"+
    "\1\41\1\42\1\67\1\70\1\13\1\46\1\13\1\47"+
    "\5\13\2\11\1\52\1\11\1\53\1\54\1\55\1\13"+
    "\20\71\1\26\3\71\1\72\1\71\1\73\1\26\40\71"+
    "\20\74\1\26\4\74\1\72\1\75\1\26\40\74\20\76"+
    "\1\77\5\76\1\100\1\77\1\101\37\76\1\11\1\12"+
    "\6\11\1\102\1\103\1\104\1\20\1\11\1\105\1\106"+
    "\1\107\1\61\1\23\1\110\1\111\3\11\1\62\1\105"+
    "\4\11\1\112\2\11\1\113\1\114\1\11\1\115\1\116"+
    "\1\117\1\120\12\11\1\110\1\121\1\122\1\53\1\54"+
    "\1\55\21\11\1\0\12\11\1\123\12\11\1\123\4\11"+
    "\2\123\14\11\1\12\1\13\1\14\1\15\3\13\1\102"+
    "\1\56\1\104\1\20\1\57\1\105\1\106\1\107\1\61"+
    "\1\23\1\110\1\111\1\24\1\25\1\11\1\62\1\105"+
    "\1\27\1\30\1\31\1\64\1\33\1\34\1\65\1\66"+
    "\1\37\1\13\1\124\1\42\1\67\1\125\1\13\1\46"+
    "\1\13\1\47\5\13\1\11\1\110\1\121\1\122\1\53"+
    "\1\54\1\55\1\13\71\0\1\12\17\0\1\23\50\0"+
    "\6\13\1\0\1\13\2\0\1\13\16\0\25\13\7\0"+
    "\1\13\3\0\2\14\3\0\1\126\1\127\61\0\2\14"+
    "\2\130\1\0\1\126\1\127\60\0\3\13\1\131\2\13"+
    "\1\0\1\13\2\0\1\13\16\0\7\13\1\132\2\13"+
    "\1\133\12\13\7\0\1\13\22\0\1\134\47\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\13\13\1\135\2\13"+
    "\1\136\6\13\7\0\1\13\1\0\1\137\17\0\1\23"+
    "\46\0\20\23\1\137\47\23\2\0\6\13\1\0\1\140"+
    "\2\0\1\13\16\0\25\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\2\13\1\141\4\13"+
    "\1\142\1\13\1\143\13\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\12\13\1\144\12\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\145"+
    "\16\0\6\13\1\146\16\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\147\2\0\1\13\16\0\11\13\1\150\13\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\2\13\1\151\3\13\1\152\2\13\1\153\1\13"+
    "\1\154\11\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\12\13\1\155\12\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\156\2\0\1\13\16\0\25\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\1\157\14\13\1\160\1\161\6\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\5\13"+
    "\1\162\4\13\1\163\2\13\1\164\7\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\165\2\0\1\13\16\0\2\13"+
    "\1\166\6\13\1\167\13\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\3\13\1\170\1\13"+
    "\1\164\4\13\1\171\6\13\1\172\3\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\2\13"+
    "\1\173\6\13\1\174\13\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\175\2\0\1\13\16\0\25\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\1\164"+
    "\14\13\1\176\7\13\7\0\1\13\2\0\6\13\1\0"+
    "\1\13\2\0\1\13\16\0\23\13\1\177\1\13\7\0"+
    "\1\13\2\0\3\13\1\200\2\13\1\0\1\13\2\0"+
    "\1\13\16\0\7\13\1\132\15\13\7\0\1\13\2\0"+
    "\6\13\1\0\1\13\2\0\1\13\16\0\16\13\1\136"+
    "\6\13\7\0\1\13\2\0\6\13\1\0\1\13\2\0"+
    "\1\13\16\0\2\13\1\201\4\13\1\142\1\13\1\202"+
    "\13\13\7\0\1\13\2\0\6\13\1\0\1\203\2\0"+
    "\1\13\16\0\25\13\7\0\1\13\2\0\6\13\1\0"+
    "\1\13\2\0\1\13\16\0\2\13\1\151\6\13\1\153"+
    "\1\13\1\154\11\13\7\0\1\13\2\0\6\13\1\0"+
    "\1\165\2\0\1\13\16\0\11\13\1\167\13\13\7\0"+
    "\1\13\2\0\6\13\1\0\1\13\2\0\1\13\16\0"+
    "\3\13\1\170\1\13\1\164\4\13\1\171\12\13\7\0"+
    "\1\13\20\71\1\0\3\71\1\0\1\71\2\0\40\71"+
    "\20\204\1\0\3\204\1\205\1\204\1\205\16\204\1\205"+
    "\22\204\20\74\1\0\4\74\3\0\40\74\20\204\1\0"+
    "\4\204\2\205\16\204\1\205\22\204\20\76\1\0\5\76"+
    "\3\0\37\76\20\206\1\0\47\206\33\0\1\207\12\0"+
    "\1\207\4\0\2\207\23\0\1\210\121\0\1\211\37\0"+
    "\1\105\7\0\1\134\63\0\1\105\70\0\1\105\73\0"+
    "\1\105\111\0\1\212\66\0\1\213\70\0\1\214\73\0"+
    "\1\215\66\0\1\216\63\0\1\217\61\0\1\220\1\0"+
    "\1\216\4\0\1\216\55\0\1\221\12\0\1\221\4\0"+
    "\2\221\15\0\6\13\1\0\1\13\2\0\1\13\16\0"+
    "\1\157\14\13\1\160\1\222\6\13\7\0\1\13\2\0"+
    "\6\13\1\0\1\13\2\0\1\13\16\0\3\13\1\170"+
    "\1\13\1\164\4\13\1\223\12\13\7\0\1\13\3\0"+
    "\2\224\66\0\2\225\5\0\1\226\3\0\1\226\54\0"+
    "\2\227\2\0\1\227\1\0\1\227\22\0\2\227\1\0"+
    "\2\227\11\0\1\227\17\0\6\13\1\0\1\13\2\0"+
    "\1\13\16\0\10\13\1\230\11\13\1\231\2\13\7\0"+
    "\1\13\2\0\6\13\1\0\1\13\2\0\1\13\16\0"+
    "\3\13\1\232\21\13\7\0\1\13\2\0\6\13\1\0"+
    "\1\13\2\0\1\13\16\0\6\13\1\233\16\13\7\0"+
    "\1\13\2\0\6\13\1\0\1\13\2\0\1\13\16\0"+
    "\10\13\1\234\14\13\7\0\1\13\2\0\6\13\1\0"+
    "\1\235\2\0\1\13\16\0\13\13\1\236\11\13\7\0"+
    "\1\13\2\0\6\13\1\0\1\13\2\0\1\13\16\0"+
    "\3\13\1\163\21\13\7\0\1\13\2\0\6\13\1\0"+
    "\1\13\2\0\1\13\16\0\3\13\1\237\4\13\1\240"+
    "\14\13\7\0\1\13\2\0\6\13\1\0\1\13\2\0"+
    "\1\13\16\0\2\13\1\241\22\13\7\0\1\13\2\0"+
    "\6\13\1\0\1\13\2\0\1\13\16\0\12\13\1\242"+
    "\12\13\7\0\1\13\2\0\6\13\1\0\1\13\2\0"+
    "\1\13\16\0\4\13\1\164\20\13\7\0\1\13\2\0"+
    "\6\13\1\0\1\13\2\0\1\13\16\0\13\13\1\201"+
    "\11\13\7\0\1\13\2\0\6\13\1\0\1\13\2\0"+
    "\1\13\16\0\22\13\1\243\2\13\7\0\1\13\2\0"+
    "\6\13\1\0\1\13\2\0\1\13\16\0\5\13\1\244"+
    "\1\13\1\245\7\13\1\246\5\13\7\0\1\13\2\0"+
    "\6\13\1\0\1\13\2\0\1\13\16\0\7\13\1\247"+
    "\15\13\7\0\1\13\2\0\6\13\1\0\1\13\2\0"+
    "\1\13\16\0\12\13\1\250\12\13\7\0\1\13\2\0"+
    "\6\13\1\0\1\13\2\0\1\13\16\0\15\13\1\164"+
    "\7\13\7\0\1\13\2\0\6\13\1\0\1\13\2\0"+
    "\1\13\16\0\12\13\1\251\12\13\7\0\1\13\2\0"+
    "\6\13\1\0\1\13\2\0\1\13\16\0\7\13\1\252"+
    "\15\13\7\0\1\13\2\0\6\13\1\0\1\13\2\0"+
    "\1\13\16\0\10\13\1\150\14\13\7\0\1\13\2\0"+
    "\6\13\1\0\1\13\2\0\1\13\16\0\22\13\1\253"+
    "\2\13\7\0\1\13\2\0\6\13\1\0\1\13\2\0"+
    "\1\13\16\0\1\164\5\13\1\254\16\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\15\13"+
    "\1\255\7\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\5\13\1\163\17\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\164\16\0\25\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\10\13\1\256\14\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\10\13\1\164\14\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\12\13\1\257\12\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\3\13\1\260\21\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\22\13\1\231\2\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\15\13\1\150\7\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\13\13\1\261\11\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\10\13\1\262\14\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\263\2\0\1\13"+
    "\16\0\25\13\7\0\1\13\2\0\6\13\1\0\1\264"+
    "\2\0\1\13\16\0\16\13\1\265\6\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\10\13"+
    "\1\230\14\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\10\13\1\240\14\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\12\13"+
    "\1\266\12\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\7\13\1\245\15\13\7\0\1\13"+
    "\33\0\1\267\12\0\1\267\4\0\2\267\23\0\1\105"+
    "\115\0\1\270\70\0\1\216\72\0\1\271\36\0\1\272"+
    "\121\0\1\216\71\0\1\217\55\0\1\273\12\0\1\273"+
    "\4\0\2\273\15\0\6\13\1\0\1\274\2\0\1\13"+
    "\16\0\15\13\1\255\7\13\7\0\1\13\3\0\2\224"+
    "\4\0\1\127\61\0\2\225\65\0\6\13\1\0\1\275"+
    "\2\0\1\13\16\0\25\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\11\13\1\276\13\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\164\2\0\1\13"+
    "\16\0\25\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\21\13\1\150\3\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\16\13"+
    "\1\150\6\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\12\13\1\164\2\13\1\232\7\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\7\13\1\232\15\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\150\2\0\1\13\16\0\25\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\1\13"+
    "\1\277\23\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\3\13\1\300\21\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\3\13"+
    "\1\156\4\13\1\301\14\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\153\2\0\1\13\16\0\25\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\2\13"+
    "\1\302\22\13\7\0\1\13\2\0\6\13\1\0\1\303"+
    "\2\0\1\13\16\0\25\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\6\13\1\304\16\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\3\13\1\254\21\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\1\13\1\305\23\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\2\13\1\306\22\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\241\2\0\1\13\16\0\25\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\307\2\0\1\13\16\0\25\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\163\2\0\1\13"+
    "\16\0\25\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\11\13\1\165\13\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\13\13"+
    "\1\310\11\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\10\13\1\311\14\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\4\13"+
    "\1\150\20\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\6\13\1\312\16\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\2\13"+
    "\1\313\22\13\7\0\1\13\2\0\3\13\1\314\2\13"+
    "\1\0\1\13\2\0\1\13\16\0\25\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\2\13"+
    "\1\315\22\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\10\13\1\301\14\13\7\0\1\13"+
    "\33\0\1\316\12\0\1\316\4\0\2\316\24\0\1\216"+
    "\67\0\1\317\123\0\1\216\55\0\1\320\12\0\1\320"+
    "\4\0\2\320\15\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\12\13\1\164\12\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\12\13\1\321\12\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\15\13\1\156\7\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\16\13\1\164\6\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\3\13\1\164\21\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\13\13\1\322\11\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\6\13\1\323\16\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\10\13\1\232\14\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\20\13\1\324\4\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\10\13\1\325\14\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\7\13\1\326\15\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\11\13\1\327\13\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\14\13\1\237\10\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\2\13\1\330\22\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\15\13\1\274\7\13\7\0\1\13\2\0\6\13"+
    "\1\0\1\13\2\0\1\13\16\0\25\13\7\0\1\164"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\10\13"+
    "\1\331\14\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\3\13\1\332\21\13\7\0\1\13"+
    "\33\0\1\333\12\0\1\333\4\0\2\333\51\0\1\334"+
    "\33\0\6\13\1\0\1\13\2\0\1\13\16\0\4\13"+
    "\1\300\20\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\12\13\1\335\12\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\7\13"+
    "\1\156\15\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\20\13\1\336\4\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\13\13"+
    "\1\337\11\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\7\13\1\340\15\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\5\13"+
    "\1\164\17\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\12\13\1\341\12\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\342\2\0\1\13\16\0\25\13"+
    "\7\0\1\13\2\0\6\13\1\0\1\13\2\0\1\13"+
    "\16\0\24\13\1\343\7\0\1\13\36\0\1\216\33\0"+
    "\6\13\1\0\1\13\2\0\1\13\16\0\6\13\1\232"+
    "\16\13\7\0\1\13\2\0\6\13\1\0\1\173\2\0"+
    "\1\13\16\0\25\13\7\0\1\13\2\0\6\13\1\0"+
    "\1\13\2\0\1\13\16\0\11\13\1\344\13\13\7\0"+
    "\1\13\2\0\6\13\1\0\1\13\2\0\1\13\16\0"+
    "\1\164\24\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\1\13\1\253\23\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\12\13"+
    "\1\345\12\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\15\13\1\346\7\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\12\13"+
    "\1\150\12\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\4\13\1\347\20\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\11\13"+
    "\1\350\13\13\7\0\1\13\2\0\6\13\1\0\1\13"+
    "\2\0\1\13\16\0\3\13\1\150\21\13\7\0\1\13"+
    "\2\0\6\13\1\0\1\13\2\0\1\13\16\0\22\13"+
    "\1\150\2\13\7\0\1\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\1\0\1\11\6\1\1\11\3\1\5\11"+
    "\20\1\5\11\2\1\1\11\1\1\2\11\6\1\1\11"+
    "\4\1\1\11\5\1\1\11\13\1\2\11\3\1\3\0"+
    "\3\1\1\11\2\1\1\0\44\1\3\11\1\1\6\0"+
    "\1\11\1\0\6\1\1\0\41\1\3\0\24\1\1\0"+
    "\1\11\12\1\1\11\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[232];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { return Tokens.RESERVED_WORD;
          }
        case 38: break;
        case 17: 
          { yybegin(VERB); return Tokens.BRACKET;
          }
        case 39: break;
        case 31: 
          { yybegin(NOUN); return Tokens.FUNCTION;
          }
        case 40: break;
        case 24: 
          { yybegin(YYINITIAL); return Tokens.BAD_CHARACTER;
          }
        case 41: break;
        case 2: 
          { yybegin(YYINITIAL);   return Tokens.BAD_CHARACTER;
          }
        case 42: break;
        case 29: 
          { return Tokens.PARENTHESIS;
          }
        case 43: break;
        case 20: 
          { yybegin(REGULAR_EXPRESSION); return Tokens.REGULAR_EXPRESSION;
          }
        case 44: break;
        case 25: 
          { final int length = yytext().length();
        if (length > 1) {
            yypushback(length -1);
            yybegin(REGULAR_EXPRESSION_FLAG);
        } else {
            yybegin(VERB);
        }
        return Tokens.REGULAR_EXPRESSION;
          }
        case 45: break;
        case 23: 
          { return Tokens.REGULAR_EXPRESSION;
          }
        case 46: break;
        case 22: 
          { yybegin(VERB); return Tokens.STRING;
          }
        case 47: break;
        case 1: 
          { yybegin(VERB); return Tokens.REGULAR_EXPRESSION_FLAG;
          }
        case 48: break;
        case 21: 
          { return Tokens.STRING;
          }
        case 49: break;
        case 35: 
          { return Tokens.BAD_CHARACTER;
          }
        case 50: break;
        case 4: 
          { yybegin(NOUN_OR_VERB); return Tokens.IDENTIFIER;
          }
        case 51: break;
        case 11: 
          { yybegin(NOUN); return Tokens.BRACE;
          }
        case 52: break;
        case 7: 
          { return Tokens.LINE_TERMINATOR;
          }
        case 53: break;
        case 28: 
          { yybegin(NOUN); return Tokens.ASSIGNMENT;
          }
        case 54: break;
        case 6: 
          { yybegin(NOUN); return Tokens.ACCESSOR;
          }
        case 55: break;
        case 27: 
          { yybegin(NOUN); return Tokens.OPERATOR;
          }
        case 56: break;
        case 14: 
          { yybegin(VERB); return Tokens.PARENTHESIS;
          }
        case 57: break;
        case 8: 
          { return Tokens.COMMENT;
          }
        case 58: break;
        case 26: 
          { yybegin(NOUN); return Tokens.DOT;
          }
        case 59: break;
        case 37: 
          { return Tokens.REGULAR_EXPRESSION_LITERAL;
          }
        case 60: break;
        case 13: 
          { return Tokens.SEMI_COLON;
          }
        case 61: break;
        case 12: 
          { yybegin(VERB); return Tokens.BRACE;
          }
        case 62: break;
        case 34: 
          { yybegin(VERB); return Tokens.BOOLEAN;
          }
        case 63: break;
        case 19: 
          { yybegin(YYINITIAL); return Tokens.LINE_TERMINATOR;
          }
        case 64: break;
        case 18: 
          { return Tokens.ASSIGNMENT;
          }
        case 65: break;
        case 5: 
          { yybegin(VERB); return Tokens.NUMBER;
          }
        case 66: break;
        case 10: 
          { yybegin(SINGLE_QUOTE_STRING); return Tokens.STRING;
          }
        case 67: break;
        case 33: 
          { yybegin(NOUN); return Tokens.KEYWORD;
          }
        case 68: break;
        case 16: 
          { yybegin(NOUN); return Tokens.BRACKET;
          }
        case 69: break;
        case 30: 
          { yybegin(NOUN); return Tokens.COMMA;
          }
        case 70: break;
        case 36: 
          { return Tokens.STRING_LITERAL;
          }
        case 71: break;
        case 3: 
          { return Tokens.WHITESPACE;
          }
        case 72: break;
        case 15: 
          { yybegin(NOUN); return Tokens.PARENTHESIS;
          }
        case 73: break;
        case 9: 
          { yybegin(DOUBLE_QUOTE_STRING); return Tokens.STRING;
          }
        case 74: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
