/* The following code was generated by JFlex 1.4.3 on 3/23/10 11:16 PM */

package yeungda.coffeescript.lang;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/23/10 11:16 PM from the specification file
 * <tt>/Users/dyeung/Projects/coffeescript/src/yeungda/coffeescript/lang/lexer.flex</tt>
 */
class Lexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SINGLE_QUOTE_STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int DOUBLE_QUOTE_STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\16\2\0\1\1\22\0\1\15\1\14\1\20\1\17"+
    "\1\2\2\14\1\21\2\0\1\14\1\12\1\0\1\12\1\10\1\14"+
    "\1\4\11\3\1\14\1\0\1\14\1\14\1\14\1\14\1\0\6\7"+
    "\11\2\1\50\7\2\1\6\2\2\1\0\1\22\2\0\1\47\1\0"+
    "\1\33\1\41\1\36\1\43\1\11\1\25\1\46\1\37\1\24\1\2"+
    "\1\42\1\26\1\23\1\34\1\40\1\44\1\2\1\31\1\27\1\30"+
    "\1\32\1\45\1\13\1\5\1\35\1\2\1\0\1\14\1\0\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\3\1\5\1\3"+
    "\1\2\1\6\1\7\1\10\20\3\1\11\1\12\1\13"+
    "\1\1\1\11\1\1\3\0\5\3\1\0\1\3\3\14"+
    "\17\3\1\14\4\3\1\14\2\3\1\15\3\3\1\16"+
    "\1\17\2\4\1\0\1\4\104\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\173\0\173\0\u0215"+
    "\0\u023e\0\u0267\0\u0290\0\u02b9\0\u02e2\0\u030b\0\u0334\0\u035d"+
    "\0\u0386\0\u03af\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5"+
    "\0\173\0\173\0\u04ce\0\u04f7\0\u0520\0\u0549\0\u0572\0\u059b"+
    "\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u0691\0\u06ba\0\315"+
    "\0\u06e3\0\u070c\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u0802"+
    "\0\u082b\0\u0854\0\u087d\0\u08a6\0\u08cf\0\u08f8\0\u0921\0\u094a"+
    "\0\u0973\0\u099c\0\u09c5\0\u09ee\0\u0a17\0\u0a40\0\u0a69\0\u0a92"+
    "\0\u0abb\0\315\0\u0ae4\0\u0b0d\0\u0b36\0\173\0\173\0\u0b5f"+
    "\0\u0b88\0\u0b88\0\u059b\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55"+
    "\0\u0c7e\0\u0ca7\0\u099c\0\u0cd0\0\u0cf9\0\u0d22\0\u0d4b\0\u0d74"+
    "\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc"+
    "\0\u0ee5\0\u0f0e\0\u0f37\0\u0f60\0\u0f89\0\u0fb2\0\u0fdb\0\u1004"+
    "\0\u102d\0\u1056\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u1123\0\u114c"+
    "\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u1219\0\u1242\0\u126b\0\u1294"+
    "\0\u12bd\0\u12e6\0\u130f\0\u1338\0\u1361\0\u0a69\0\u138a\0\u13b3"+
    "\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480\0\u14a9\0\u14d2\0\u14fb"+
    "\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8\0\u15f1\0\u161a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\3\6\1\4\1\11"+
    "\1\12\1\13\1\12\2\14\1\15\1\16\1\17\1\4"+
    "\1\6\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\6\1\33\1\34\1\6"+
    "\1\35\1\6\1\36\1\6\1\37\1\6\1\40\1\41"+
    "\14\40\1\41\1\40\1\42\1\40\1\43\26\40\1\44"+
    "\1\41\14\44\1\41\2\44\1\42\1\45\26\44\52\0"+
    "\1\5\13\0\2\5\34\0\6\6\1\0\1\6\1\0"+
    "\1\6\7\0\26\6\3\0\2\7\3\0\1\46\1\47"+
    "\42\0\2\7\2\50\1\0\1\46\1\47\41\0\3\6"+
    "\1\51\2\6\1\0\1\6\1\0\1\6\7\0\3\6"+
    "\1\52\5\6\1\53\14\6\12\0\1\12\1\0\1\12"+
    "\36\0\6\6\1\0\1\6\1\0\1\6\7\0\1\6"+
    "\1\54\12\6\1\55\11\6\1\0\1\5\13\0\1\14"+
    "\1\5\1\15\31\0\16\15\1\56\32\15\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\1\57\1\6\1\60"+
    "\1\6\1\61\4\6\1\62\14\6\2\0\6\6\1\0"+
    "\1\6\1\0\1\6\7\0\1\6\1\63\5\6\1\64"+
    "\1\65\4\6\1\66\10\6\2\0\6\6\1\0\1\67"+
    "\1\0\1\6\7\0\26\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\70\7\0\7\6\1\71\16\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\6\6\1\72\3\6"+
    "\1\73\1\6\1\74\11\6\2\0\6\6\1\0\1\75"+
    "\1\0\1\6\7\0\26\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\11\6\1\76\14\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\11\6\1\77\14\6"+
    "\2\0\6\6\1\0\1\100\1\0\1\6\7\0\10\6"+
    "\1\101\4\6\1\102\10\6\2\0\6\6\1\0\1\103"+
    "\1\0\1\6\7\0\26\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\3\6\1\104\4\6\1\105\4\6"+
    "\1\106\10\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\2\6\1\107\3\6\1\60\2\6\1\60\14\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\6\6"+
    "\1\110\3\6\1\60\13\6\2\0\6\6\1\0\1\111"+
    "\1\0\1\6\7\0\15\6\1\112\10\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\10\6\1\113\4\6"+
    "\1\114\10\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\24\6\1\115\1\6\1\40\1\0\14\40\1\0"+
    "\1\40\1\0\1\40\1\0\26\40\16\116\1\0\1\116"+
    "\1\117\1\116\1\117\26\116\1\44\1\0\14\44\1\0"+
    "\2\44\2\0\26\44\16\116\1\0\2\116\2\117\26\116"+
    "\3\0\2\120\47\0\2\121\5\0\1\122\41\0\2\123"+
    "\2\0\1\123\1\0\1\123\13\0\1\123\5\0\1\123"+
    "\2\0\1\123\2\0\1\123\1\0\1\123\7\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\5\6\1\124\13\6"+
    "\1\125\4\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\4\6\1\126\21\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\127\16\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\5\6\1\130\20\6"+
    "\2\0\6\6\1\0\1\131\1\0\1\6\7\0\1\6"+
    "\1\132\24\6\15\0\1\56\1\0\1\15\33\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\21\6\1\125\4\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\11\6"+
    "\1\133\14\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\4\6\1\134\21\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\11\6\1\135\14\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\11\6\1\136\14\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\3\6"+
    "\1\52\22\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\6\6\1\60\17\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\5\6\1\112\20\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\1\6\1\137\24\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\21\6"+
    "\1\140\4\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\7\6\1\126\2\6\1\60\13\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\21\6\1\141\4\6"+
    "\2\0\6\6\1\0\1\142\1\0\1\6\7\0\6\6"+
    "\1\143\17\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\5\6\1\144\20\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\3\6\1\145\22\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\20\6\1\60\5\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\60\7\0\26\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\5\6"+
    "\1\146\20\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\5\6\1\60\20\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\4\6\1\60\21\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\10\6\1\147\15\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\4\6"+
    "\1\150\1\151\20\6\2\0\6\6\1\0\1\6\1\0"+
    "\1\6\7\0\11\6\1\152\14\6\2\0\6\6\1\0"+
    "\1\6\1\0\1\6\7\0\2\6\1\60\23\6\2\0"+
    "\6\6\1\0\1\153\1\0\1\6\7\0\26\6\2\0"+
    "\6\6\1\0\1\6\1\0\1\6\7\0\2\6\1\154"+
    "\1\155\12\6\1\156\7\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\6\6\1\112\17\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\1\6\1\157\24\6"+
    "\2\0\6\6\1\0\1\160\1\0\1\6\7\0\14\6"+
    "\1\161\11\6\3\0\2\120\4\0\1\47\42\0\2\121"+
    "\46\0\6\6\1\0\1\162\1\0\1\6\7\0\26\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\15\6"+
    "\1\163\10\6\2\0\6\6\1\0\1\60\1\0\1\6"+
    "\7\0\26\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\1\112\25\6\2\0\6\6\1\0\1\6\1\0"+
    "\1\6\7\0\14\6\1\112\11\6\2\0\6\6\1\0"+
    "\1\6\1\0\1\6\7\0\6\6\1\126\2\6\1\60"+
    "\14\6\2\0\6\6\1\0\1\6\1\0\1\6\7\0"+
    "\3\6\1\126\22\6\2\0\6\6\1\0\1\6\1\0"+
    "\1\6\7\0\5\6\1\164\20\6\2\0\6\6\1\0"+
    "\1\6\1\0\1\6\7\0\10\6\1\165\15\6\2\0"+
    "\6\6\1\0\1\6\1\0\1\6\7\0\13\6\1\166"+
    "\12\6\2\0\6\6\1\0\1\6\1\0\1\6\7\0"+
    "\5\6\1\151\20\6\2\0\6\6\1\0\1\66\1\0"+
    "\1\6\7\0\26\6\2\0\6\6\1\0\1\167\1\0"+
    "\1\6\7\0\26\6\2\0\6\6\1\0\1\6\1\0"+
    "\1\6\7\0\11\6\1\60\14\6\2\0\6\6\1\0"+
    "\1\6\1\0\1\6\7\0\15\6\1\100\10\6\2\0"+
    "\6\6\1\0\1\6\1\0\1\6\7\0\7\6\1\170"+
    "\16\6\2\0\6\6\1\0\1\147\1\0\1\6\7\0"+
    "\26\6\2\0\6\6\1\0\1\6\1\0\1\6\7\0"+
    "\1\6\1\171\24\6\2\0\6\6\1\0\1\6\1\0"+
    "\1\6\7\0\4\6\1\103\21\6\2\0\6\6\1\0"+
    "\1\112\1\0\1\6\7\0\26\6\2\0\6\6\1\0"+
    "\1\6\1\0\1\6\7\0\13\6\1\172\12\6\2\0"+
    "\6\6\1\0\1\6\1\0\1\6\7\0\4\6\1\67"+
    "\1\173\20\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\10\6\1\174\15\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\10\6\1\175\15\6\2\0\6\6"+
    "\1\0\1\176\1\0\1\6\7\0\26\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\7\6\1\177\16\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\20\6"+
    "\1\112\5\6\2\0\3\6\1\200\2\6\1\0\1\6"+
    "\1\0\1\6\7\0\26\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\10\6\1\201\15\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\11\6\1\202\14\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\6\6"+
    "\1\67\17\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\10\6\1\203\15\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\3\6\1\204\22\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\5\6\1\205\20\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\15\6"+
    "\1\206\10\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\6\6\1\142\17\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\22\6\1\150\3\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\14\6\1\60\11\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\1\6"+
    "\1\207\24\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\17\6\1\60\6\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\7\6\1\210\16\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\5\6\1\126\20\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\23\6"+
    "\1\211\2\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\5\6\1\212\20\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\4\6\1\213\21\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\20\6\1\103\5\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\11\6"+
    "\1\214\14\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\3\6\1\215\22\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\1\6\1\216\24\6\2\0\6\6"+
    "\1\0\1\6\1\0\1\6\7\0\11\6\1\217\14\6"+
    "\2\0\6\6\1\0\1\6\1\0\1\6\7\0\3\6"+
    "\1\67\22\6\2\0\6\6\1\0\1\6\1\0\1\6"+
    "\7\0\23\6\1\220\2\6\2\0\6\6\1\0\1\221"+
    "\1\0\1\6\7\0\26\6\2\0\6\6\1\0\1\6"+
    "\1\0\1\6\7\0\25\6\1\222\2\0\6\6\1\0"+
    "\1\6\1\0\1\6\7\0\13\6\1\141\12\6\2\0"+
    "\6\6\1\0\1\6\1\0\1\6\7\0\12\6\1\60"+
    "\13\6\2\0\6\6\1\0\1\6\1\0\1\6\7\0"+
    "\15\6\1\223\10\6\2\0\6\6\1\0\1\6\1\0"+
    "\1\6\7\0\7\6\1\126\16\6\2\0\6\6\1\0"+
    "\1\113\1\0\1\6\7\0\26\6\2\0\6\6\1\0"+
    "\1\6\1\0\1\6\7\0\11\6\1\224\14\6\2\0"+
    "\6\6\1\0\1\6\1\0\1\6\7\0\6\6\1\225"+
    "\17\6\2\0\6\6\1\0\1\6\1\0\1\6\7\0"+
    "\11\6\1\112\14\6\2\0\6\6\1\0\1\6\1\0"+
    "\1\6\7\0\20\6\1\226\5\6\2\0\6\6\1\0"+
    "\1\6\1\0\1\6\7\0\15\6\1\227\10\6\2\0"+
    "\6\6\1\0\1\6\1\0\1\6\7\0\4\6\1\112"+
    "\21\6\2\0\6\6\1\0\1\6\1\0\1\6\7\0"+
    "\21\6\1\112\4\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5699];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\11\1\2\11\21\1\2\11\3\1\3\0"+
    "\5\1\1\0\37\1\2\11\2\1\1\0\105\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[151];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 12: 
          { return Tokens.KEYWORD;
          }
        case 16: break;
        case 8: 
          { yybegin(SINGLE_QUOTE_STRING); return Tokens.STRING;
          }
        case 17: break;
        case 5: 
          { return Tokens.OPERATOR;
          }
        case 18: break;
        case 6: 
          { return Tokens.COMMENT;
          }
        case 19: break;
        case 7: 
          { yybegin(DOUBLE_QUOTE_STRING); return Tokens.STRING;
          }
        case 20: break;
        case 15: 
          { return Tokens.STRING_LITERAL;
          }
        case 21: break;
        case 9: 
          { return Tokens.STRING;
          }
        case 22: break;
        case 4: 
          { return Tokens.NUMBER;
          }
        case 23: break;
        case 13: 
          { return Tokens.RESERVED_WORD;
          }
        case 24: break;
        case 3: 
          { return Tokens.IDENTIFIER;
          }
        case 25: break;
        case 11: 
          { yybegin(YYINITIAL); return Tokens.STRING;
          }
        case 26: break;
        case 2: 
          { return Tokens.WHITESPACE;
          }
        case 27: break;
        case 14: 
          { return Tokens.BAD_CHARACTER;
          }
        case 28: break;
        case 10: 
          { return Tokens.LINE_TERMINATOR;
          }
        case 29: break;
        case 1: 
          { yybegin(YYINITIAL);   return Tokens.BAD_CHARACTER;
          }
        case 30: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
