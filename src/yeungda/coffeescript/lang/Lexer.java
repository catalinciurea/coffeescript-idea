/* The following code was generated by JFlex 1.4.3 on 3/27/10 5:34 PM */

package yeungda.coffeescript.lang;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/27/10 5:34 PM from the specification file
 * <tt>/Users/dyeung/Projects/coffeescript/src/yeungda/coffeescript/lang/lexer.flex</tt>
 */
class Lexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int REGULAR_EXPRESSION = 8;
  public static final int VERB = 10;
  public static final int REGULAR_EXPRESSION_FLAG = 12;
  public static final int HEREDOCS = 18;
  public static final int DOUBLE_QUOTE_STRING = 4;
  public static final int SINGLE_QUOTE_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int NOUN = 2;
  public static final int JAVASCRIPT = 16;
  public static final int NOUN_OR_VERB = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9, 9
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\20\2\0\1\27\22\0\1\1\1\63\1\24\1\21"+
    "\1\2\1\15\1\15\1\25\1\66\1\64\1\15\1\16\1\65\1\12"+
    "\1\10\1\30\1\4\11\3\1\23\1\61\1\62\1\17\1\22\1\15"+
    "\1\13\6\7\11\2\1\60\7\2\1\6\2\2\1\67\1\26\1\70"+
    "\1\0\1\57\1\34\1\36\1\53\1\35\1\40\1\11\1\41\1\54"+
    "\1\52\1\47\1\2\1\71\1\43\1\55\1\46\1\45\1\56\1\2"+
    "\1\51\1\37\1\44\1\42\1\50\1\14\1\5\1\33\1\2\1\31"+
    "\1\15\1\32\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\3\0\1\2\1\3\1\4\2\5\1\4"+
    "\1\2\1\6\1\4\1\7\1\10\1\11\1\12\1\7"+
    "\1\13\1\14\1\4\1\15\17\4\1\16\1\17\1\20"+
    "\1\21\1\22\2\4\1\23\2\24\1\25\5\4\1\26"+
    "\1\27\1\2\1\26\1\2\1\30\1\31\1\2\1\32"+
    "\1\33\1\2\3\34\1\35\1\34\1\35\7\2\1\34"+
    "\1\36\1\37\1\1\2\4\1\40\1\41\2\42\3\0"+
    "\3\4\1\43\2\4\2\0\10\4\1\44\11\4\1\45"+
    "\1\46\1\45\2\4\1\46\1\45\13\4\1\47\1\50"+
    "\1\51\1\32\1\34\5\0\1\45\1\0\1\45\1\1"+
    "\1\4\1\45\1\0\2\5\1\0\1\5\7\4\1\52"+
    "\30\4\1\32\3\0\1\1\1\4\1\53\21\4\1\32"+
    "\1\0\1\1\12\4\1\32\1\0\14\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u0244\0\u03da\0\u0414\0\u044e\0\u0244\0\u0488\0\u0244"+
    "\0\u0244\0\u0244\0\u04c2\0\u0244\0\u04fc\0\u0536\0\u0570\0\u05aa"+
    "\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc\0\u0706\0\u0740\0\u077a"+
    "\0\u07b4\0\u07ee\0\u0828\0\u0244\0\u0244\0\u0244\0\u0244\0\u0244"+
    "\0\u0862\0\u089c\0\u03a0\0\u0414\0\u0244\0\u0244\0\u08d6\0\u0910"+
    "\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0244\0\u0a32\0\u0a6c\0\u0aa6"+
    "\0\u0ae0\0\u0244\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\u0244"+
    "\0\u0c3c\0\u0c76\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2"+
    "\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0244\0\u0244\0\u0ef4\0\u0f2e"+
    "\0\u0f68\0\u0fa2\0\u0244\0\u0244\0\u0fdc\0\u1016\0\u1050\0\u108a"+
    "\0\u10c4\0\u10fe\0\u1138\0\u0244\0\u1172\0\u11ac\0\u0414\0\u11e6"+
    "\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6"+
    "\0\u02b8\0\u13f0\0\u142a\0\u1464\0\u149e\0\u14d8\0\u1512\0\u154c"+
    "\0\u1586\0\u15c0\0\u15fa\0\u02b8\0\u02b8\0\u1634\0\u166e\0\u16a8"+
    "\0\u16e2\0\u171c\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878"+
    "\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u0244\0\u0244\0\u0244\0\u199a"+
    "\0\u19d4\0\u1a0e\0\u1a48\0\u0e0c\0\u1a82\0\u1abc\0\u0244\0\u1af6"+
    "\0\u1b30\0\u1b6a\0\u1ba4\0\u171c\0\u1bde\0\u1c18\0\u1c52\0\u1c52"+
    "\0\u108a\0\u1c8c\0\u1cc6\0\u1d00\0\u1d3a\0\u1d74\0\u1dae\0\u1de8"+
    "\0\u0244\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u1f7e"+
    "\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114\0\u214e"+
    "\0\u2188\0\u16a8\0\u21c2\0\u21fc\0\u2236\0\u2270\0\u22aa\0\u22e4"+
    "\0\u231e\0\u2358\0\u2392\0\u23cc\0\u2406\0\u2440\0\u247a\0\u0244"+
    "\0\u24b4\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u2610\0\u264a"+
    "\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0\0\u281a"+
    "\0\u2854\0\u288e\0\u28c8\0\u0244\0\u2902\0\u293c\0\u2976\0\u29b0"+
    "\0\u29ea\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u0244\0\u2b46"+
    "\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16"+
    "\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\15\1\16\1\17\3\15\1\13\1\20"+
    "\1\21\1\22\1\23\2\13\1\21\1\24\1\25\2\13"+
    "\1\26\1\27\1\13\1\30\1\13\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\15\1\52"+
    "\3\15\1\53\1\15\1\54\2\13\1\55\1\13\1\56"+
    "\1\57\1\60\1\15\1\13\1\14\1\15\1\16\1\17"+
    "\3\15\1\13\1\61\1\21\1\22\1\62\2\13\1\63"+
    "\1\64\1\25\2\13\1\26\1\27\1\13\1\65\1\66"+
    "\1\31\1\32\1\33\1\13\1\67\1\36\1\37\1\70"+
    "\1\71\1\42\1\15\1\44\1\45\1\72\1\73\1\15"+
    "\1\51\1\15\1\52\5\15\3\13\1\55\1\13\1\56"+
    "\1\57\1\60\1\15\20\74\1\30\3\74\1\75\1\74"+
    "\1\76\1\30\42\74\20\77\1\30\4\77\1\75\1\100"+
    "\1\30\42\77\20\101\1\102\5\101\1\103\1\102\1\104"+
    "\41\101\1\13\1\14\6\13\1\105\1\106\1\107\1\22"+
    "\1\13\1\110\1\111\1\112\1\64\1\25\1\113\1\114"+
    "\3\13\1\65\1\110\5\13\1\115\2\13\1\116\1\117"+
    "\1\13\1\120\1\121\1\122\1\123\12\13\1\124\1\113"+
    "\1\125\1\126\1\56\1\57\1\60\21\13\1\0\12\13"+
    "\1\127\13\13\1\127\4\13\2\127\15\13\1\14\1\15"+
    "\1\16\1\17\3\15\1\105\1\61\1\107\1\22\1\62"+
    "\1\110\1\111\1\112\1\64\1\25\1\113\1\114\1\26"+
    "\1\27\1\13\1\65\1\110\1\31\1\32\1\33\1\13"+
    "\1\67\1\36\1\37\1\70\1\71\1\42\1\15\1\130"+
    "\1\45\1\72\1\131\1\15\1\51\1\15\1\52\5\15"+
    "\1\13\1\124\1\113\1\125\1\126\1\56\1\57\1\60"+
    "\1\15\34\132\1\133\35\132\20\134\1\30\4\134\1\135"+
    "\1\134\1\30\42\134\73\0\1\14\17\0\1\25\52\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\24\15\10\0\1\15\3\0\2\16\3\0\1\136\1\137"+
    "\63\0\2\16\2\140\1\0\1\136\1\137\62\0\3\15"+
    "\1\141\2\15\1\0\1\15\2\0\1\15\16\0\1\15"+
    "\1\0\6\15\1\142\2\15\1\143\12\15\10\0\1\15"+
    "\22\0\1\144\51\0\6\15\1\0\1\15\2\0\1\15"+
    "\16\0\1\15\1\0\12\15\1\145\2\15\1\146\6\15"+
    "\10\0\1\15\1\0\1\147\17\0\1\25\50\0\20\25"+
    "\1\147\51\25\25\0\1\150\46\0\6\15\1\0\1\151"+
    "\2\0\1\15\16\0\1\15\1\0\24\15\10\0\1\15"+
    "\2\0\6\15\1\0\1\15\2\0\1\15\16\0\1\15"+
    "\1\0\1\15\1\152\4\15\1\153\1\15\1\154\13\15"+
    "\10\0\1\15\2\0\6\15\1\0\1\15\2\0\1\15"+
    "\16\0\1\15\1\0\11\15\1\155\12\15\10\0\1\15"+
    "\2\0\6\15\1\0\1\15\2\0\1\156\16\0\1\15"+
    "\1\0\5\15\1\157\16\15\10\0\1\15\2\0\6\15"+
    "\1\0\1\160\2\0\1\15\16\0\1\15\1\0\10\15"+
    "\1\161\13\15\10\0\1\15\2\0\6\15\1\0\1\15"+
    "\2\0\1\15\16\0\1\15\1\0\1\15\1\162\3\15"+
    "\1\163\2\15\1\164\1\15\1\165\11\15\10\0\1\15"+
    "\2\0\6\15\1\0\1\15\2\0\1\15\16\0\1\15"+
    "\1\0\11\15\1\166\12\15\10\0\1\15\2\0\6\15"+
    "\1\0\1\167\2\0\1\15\16\0\1\15\1\0\24\15"+
    "\10\0\1\15\2\0\6\15\1\0\1\15\2\0\1\15"+
    "\16\0\1\170\1\0\14\15\1\171\1\172\6\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\4\15\1\173\4\15\1\174\2\15\1\175"+
    "\7\15\10\0\1\15\2\0\6\15\1\0\1\176\2\0"+
    "\1\15\16\0\1\15\1\0\1\15\1\177\6\15\1\200"+
    "\13\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\2\15\1\201\1\15\1\175"+
    "\4\15\1\202\6\15\1\203\3\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\1\15\1\204\6\15\1\205\13\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\206\2\0\1\15\16\0\1\15\1\0"+
    "\24\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\175\1\0\14\15\1\207\7\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\22\15\1\210\1\15\10\0\1\15\2\0"+
    "\3\15\1\211\2\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\6\15\1\142\15\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\15\15\1\146\6\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\1\15\1\212"+
    "\4\15\1\153\1\15\1\213\13\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\214\2\0\1\15\16\0\1\15\1\0"+
    "\24\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\1\15\1\162\6\15\1\164"+
    "\1\15\1\165\11\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\176\2\0\1\15\16\0\1\15\1\0\10\15\1\200"+
    "\13\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\2\15\1\201\1\15\1\175"+
    "\4\15\1\202\12\15\10\0\1\15\20\74\1\0\3\74"+
    "\1\0\1\74\2\0\42\74\20\215\1\0\3\215\1\216"+
    "\1\215\1\216\17\215\1\216\23\215\20\77\1\0\4\77"+
    "\3\0\42\77\20\215\1\0\4\215\2\216\17\215\1\216"+
    "\23\215\20\101\1\0\5\101\3\0\41\101\20\217\1\0"+
    "\51\217\33\0\1\220\13\0\1\220\4\0\2\220\24\0"+
    "\1\221\124\0\1\222\40\0\1\110\7\0\1\144\65\0"+
    "\1\110\72\0\1\110\2\0\1\144\66\0\1\110\75\0"+
    "\1\110\114\0\1\223\70\0\1\224\72\0\1\225\75\0"+
    "\1\226\70\0\1\227\65\0\1\230\63\0\1\231\1\0"+
    "\1\227\4\0\1\227\35\0\1\110\4\0\1\110\105\0"+
    "\1\232\13\0\1\232\4\0\2\232\16\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\170\1\0\14\15\1\171"+
    "\1\233\6\15\10\0\1\15\2\0\6\15\1\0\1\15"+
    "\2\0\1\15\16\0\1\15\1\0\2\15\1\201\1\15"+
    "\1\175\4\15\1\234\12\15\10\0\1\15\34\132\1\0"+
    "\35\132\25\0\1\235\47\0\2\236\70\0\2\237\5\0"+
    "\1\240\3\0\1\240\56\0\2\241\2\0\1\241\1\0"+
    "\1\241\23\0\2\241\1\0\2\241\11\0\1\241\20\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\7\15\1\242\11\15\1\243\2\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\2\15\1\244\21\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\5\15\1\245"+
    "\16\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\7\15\1\246\14\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\247\2\0\1\15\16\0"+
    "\1\15\1\0\12\15\1\250\11\15\10\0\1\15\25\0"+
    "\1\251\46\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\2\15\1\174\21\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\2\15\1\252\4\15\1\253\14\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\1\15\1\254\22\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\11\15\1\255"+
    "\12\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\3\15\1\175\20\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\12\15\1\212\11\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\21\15\1\256\2\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\4\15\1\257"+
    "\1\15\1\260\7\15\1\261\5\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\6\15\1\262\15\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\11\15\1\263"+
    "\12\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\14\15\1\175\7\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\11\15\1\264\12\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\6\15\1\265\15\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\7\15\1\161"+
    "\14\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\21\15\1\266\2\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\175\1\0\5\15\1\267\16\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\14\15\1\270\7\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\4\15\1\174"+
    "\17\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\175\16\0\1\15\1\0\24\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\7\15\1\271\14\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\7\15\1\175"+
    "\14\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\11\15\1\272\12\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\2\15\1\273\21\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\21\15\1\243\2\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\14\15\1\161"+
    "\7\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\12\15\1\274\11\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\7\15\1\275\14\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\276\2\0\1\15\16\0\1\15\1\0"+
    "\24\15\10\0\1\15\2\0\6\15\1\0\1\277\2\0"+
    "\1\15\16\0\1\15\1\0\15\15\1\300\6\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\7\15\1\242\14\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\7\15\1\253\14\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\11\15\1\301"+
    "\12\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\6\15\1\260\15\15\10\0"+
    "\1\15\33\0\1\302\13\0\1\302\4\0\2\302\24\0"+
    "\1\110\120\0\1\303\72\0\1\227\74\0\1\304\37\0"+
    "\1\305\124\0\1\227\73\0\1\230\56\0\1\306\13\0"+
    "\1\306\4\0\2\306\16\0\6\15\1\0\1\307\2\0"+
    "\1\15\16\0\1\15\1\0\14\15\1\270\7\15\10\0"+
    "\1\15\25\0\1\310\47\0\2\236\4\0\1\137\63\0"+
    "\2\237\67\0\6\15\1\0\1\311\2\0\1\15\16\0"+
    "\1\15\1\0\24\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\10\15\1\312"+
    "\13\15\10\0\1\15\2\0\6\15\1\0\1\175\2\0"+
    "\1\15\16\0\1\15\1\0\24\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\20\15\1\161\3\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\15\15\1\161"+
    "\6\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\11\15\1\175\2\15\1\244"+
    "\7\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\6\15\1\244\15\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\161\2\0\1\15\16\0"+
    "\1\15\1\0\24\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\1\313\23\15"+
    "\10\0\1\15\2\0\6\15\1\0\1\15\2\0\1\15"+
    "\16\0\1\15\1\0\2\15\1\314\21\15\10\0\1\15"+
    "\2\0\6\15\1\0\1\15\2\0\1\15\16\0\1\15"+
    "\1\0\2\15\1\167\4\15\1\315\14\15\10\0\1\15"+
    "\2\0\6\15\1\0\1\164\2\0\1\15\16\0\1\15"+
    "\1\0\24\15\10\0\1\15\2\0\6\15\1\0\1\15"+
    "\2\0\1\15\16\0\1\15\1\0\1\15\1\316\22\15"+
    "\10\0\1\15\2\0\6\15\1\0\1\317\2\0\1\15"+
    "\16\0\1\15\1\0\24\15\10\0\1\15\2\0\6\15"+
    "\1\0\1\15\2\0\1\15\16\0\1\15\1\0\5\15"+
    "\1\320\16\15\10\0\1\15\2\0\6\15\1\0\1\15"+
    "\2\0\1\15\16\0\1\15\1\0\2\15\1\267\21\15"+
    "\10\0\1\15\2\0\6\15\1\0\1\15\2\0\1\15"+
    "\16\0\1\15\1\0\1\321\23\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\1\15\1\322\22\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\254\2\0\1\15\16\0\1\15\1\0\24\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\323\2\0\1\15\16\0"+
    "\1\15\1\0\24\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\174\2\0\1\15\16\0\1\15\1\0\24\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\10\15\1\176\13\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\12\15\1\324\11\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\7\15\1\325"+
    "\14\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\3\15\1\161\20\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\5\15\1\326\16\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\1\15\1\327\22\15\10\0\1\15\2\0\3\15\1\330"+
    "\2\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\24\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\1\15\1\331\22\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\7\15\1\315\14\15\10\0\1\15\33\0"+
    "\1\332\13\0\1\332\4\0\2\332\25\0\1\227\71\0"+
    "\1\333\126\0\1\227\56\0\1\334\13\0\1\334\4\0"+
    "\2\334\16\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\11\15\1\175\12\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\11\15\1\335\12\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\14\15\1\167"+
    "\7\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\15\15\1\175\6\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\2\15\1\175\21\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\12\15\1\336\11\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\5\15\1\337"+
    "\16\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\7\15\1\244\14\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\17\15\1\340\4\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\7\15\1\341\14\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\6\15\1\342"+
    "\15\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\10\15\1\343\13\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\13\15\1\252\10\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\1\15\1\344\22\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\14\15\1\307"+
    "\7\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\24\15\10\0\1\175\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\7\15\1\345\14\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\2\15\1\346"+
    "\21\15\10\0\1\15\33\0\1\347\13\0\1\347\4\0"+
    "\2\347\53\0\1\350\34\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\3\15\1\314\20\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\11\15\1\351\12\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\6\15\1\167\15\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\17\15\1\352"+
    "\4\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\12\15\1\353\11\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\6\15\1\354\15\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\4\15\1\175\17\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\11\15\1\355"+
    "\12\15\10\0\1\15\2\0\6\15\1\0\1\356\2\0"+
    "\1\15\16\0\1\15\1\0\24\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\23\15\1\357\10\0\1\15\37\0\1\227\34\0\6\15"+
    "\1\0\1\15\2\0\1\15\16\0\1\15\1\0\5\15"+
    "\1\244\16\15\10\0\1\15\2\0\6\15\1\0\1\204"+
    "\2\0\1\15\16\0\1\15\1\0\24\15\10\0\1\15"+
    "\2\0\6\15\1\0\1\15\2\0\1\15\16\0\1\15"+
    "\1\0\10\15\1\360\13\15\10\0\1\15\2\0\6\15"+
    "\1\0\1\15\2\0\1\15\16\0\1\175\1\0\24\15"+
    "\10\0\1\15\2\0\6\15\1\0\1\15\2\0\1\15"+
    "\16\0\1\15\1\0\1\266\23\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\11\15\1\361\12\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\14\15\1\362"+
    "\7\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\11\15\1\161\12\15\10\0"+
    "\1\15\2\0\6\15\1\0\1\15\2\0\1\15\16\0"+
    "\1\15\1\0\3\15\1\363\20\15\10\0\1\15\2\0"+
    "\6\15\1\0\1\15\2\0\1\15\16\0\1\15\1\0"+
    "\10\15\1\364\13\15\10\0\1\15\2\0\6\15\1\0"+
    "\1\15\2\0\1\15\16\0\1\15\1\0\2\15\1\161"+
    "\21\15\10\0\1\15\2\0\6\15\1\0\1\15\2\0"+
    "\1\15\16\0\1\15\1\0\21\15\1\161\2\15\10\0"+
    "\1\15";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11832];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\1\3\0\1\11\6\1\1\11\3\1\1\11"+
    "\1\1\3\11\1\1\1\11\17\1\5\11\4\1\2\11"+
    "\6\1\1\11\4\1\1\11\5\1\1\11\14\1\2\11"+
    "\4\1\2\11\1\1\3\0\3\1\1\11\2\1\2\0"+
    "\44\1\3\11\2\1\5\0\1\11\1\0\4\1\1\0"+
    "\2\1\1\0\10\1\1\11\31\1\3\0\2\1\1\11"+
    "\22\1\1\0\1\11\12\1\1\11\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[244];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { return Tokens.RESERVED_WORD;
          }
        case 44: break;
        case 18: 
          { yybegin(VERB); return Tokens.BRACKET;
          }
        case 45: break;
        case 35: 
          { yybegin(NOUN); return Tokens.FUNCTION;
          }
        case 46: break;
        case 25: 
          { yybegin(YYINITIAL); return Tokens.BAD_CHARACTER;
          }
        case 47: break;
        case 2: 
          { yybegin(YYINITIAL);   return Tokens.BAD_CHARACTER;
          }
        case 48: break;
        case 30: 
          { return Tokens.PARENTHESIS;
          }
        case 49: break;
        case 21: 
          { yybegin(REGULAR_EXPRESSION); return Tokens.REGULAR_EXPRESSION;
          }
        case 50: break;
        case 34: 
          { return Tokens.HEREDOCS;
          }
        case 51: break;
        case 26: 
          { final int length = yytext().length();
        if (length > 1) {
            yypushback(length -1);
            yybegin(REGULAR_EXPRESSION_FLAG);
        } else {
            yybegin(VERB);
        }
        return Tokens.REGULAR_EXPRESSION;
          }
        case 52: break;
        case 42: 
          { yybegin(HEREDOCS); return Tokens.HEREDOCS;
          }
        case 53: break;
        case 24: 
          { return Tokens.REGULAR_EXPRESSION;
          }
        case 54: break;
        case 23: 
          { yybegin(VERB); return Tokens.STRING;
          }
        case 55: break;
        case 13: 
          { yybegin(JAVASCRIPT); return Tokens.JAVASCRIPT;
          }
        case 56: break;
        case 1: 
          { yybegin(VERB); return Tokens.REGULAR_EXPRESSION_FLAG;
          }
        case 57: break;
        case 22: 
          { return Tokens.STRING;
          }
        case 58: break;
        case 43: 
          { yybegin(VERB);  return Tokens.HEREDOCS;
          }
        case 59: break;
        case 39: 
          { return Tokens.BAD_CHARACTER;
          }
        case 60: break;
        case 4: 
          { yybegin(NOUN_OR_VERB); return Tokens.IDENTIFIER;
          }
        case 61: break;
        case 11: 
          { yybegin(NOUN); return Tokens.BRACE;
          }
        case 62: break;
        case 7: 
          { return Tokens.LINE_TERMINATOR;
          }
        case 63: break;
        case 29: 
          { yybegin(NOUN); return Tokens.ASSIGNMENT;
          }
        case 64: break;
        case 33: 
          { yybegin(YYINITIAL); return Tokens.JAVASCRIPT;
          }
        case 65: break;
        case 6: 
          { yybegin(NOUN); return Tokens.ACCESSOR;
          }
        case 66: break;
        case 28: 
          { yybegin(NOUN); return Tokens.OPERATOR;
          }
        case 67: break;
        case 15: 
          { yybegin(VERB); return Tokens.PARENTHESIS;
          }
        case 68: break;
        case 8: 
          { return Tokens.COMMENT;
          }
        case 69: break;
        case 27: 
          { yybegin(NOUN); return Tokens.DOT;
          }
        case 70: break;
        case 41: 
          { return Tokens.REGULAR_EXPRESSION_LITERAL;
          }
        case 71: break;
        case 14: 
          { return Tokens.SEMI_COLON;
          }
        case 72: break;
        case 12: 
          { yybegin(VERB); return Tokens.BRACE;
          }
        case 73: break;
        case 38: 
          { yybegin(VERB); return Tokens.BOOLEAN;
          }
        case 74: break;
        case 20: 
          { yybegin(YYINITIAL); return Tokens.LINE_TERMINATOR;
          }
        case 75: break;
        case 19: 
          { return Tokens.ASSIGNMENT;
          }
        case 76: break;
        case 5: 
          { yybegin(VERB); return Tokens.NUMBER;
          }
        case 77: break;
        case 10: 
          { yybegin(SINGLE_QUOTE_STRING); return Tokens.STRING;
          }
        case 78: break;
        case 37: 
          { yybegin(NOUN); return Tokens.KEYWORD;
          }
        case 79: break;
        case 17: 
          { yybegin(NOUN); return Tokens.BRACKET;
          }
        case 80: break;
        case 31: 
          { yybegin(NOUN); return Tokens.COMMA;
          }
        case 81: break;
        case 40: 
          { return Tokens.STRING_LITERAL;
          }
        case 82: break;
        case 3: 
          { return Tokens.WHITESPACE;
          }
        case 83: break;
        case 16: 
          { yybegin(NOUN); return Tokens.PARENTHESIS;
          }
        case 84: break;
        case 9: 
          { yybegin(DOUBLE_QUOTE_STRING); return Tokens.STRING;
          }
        case 85: break;
        case 32: 
          { return Tokens.JAVASCRIPT;
          }
        case 86: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
