/* The following code was generated by JFlex 1.4.3 on 3/23/10 11:50 PM */

package yeungda.coffeescript.lang;


import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/23/10 11:50 PM from the specification file
 * <tt>/Users/dyeung/Projects/coffeescript/src/yeungda/coffeescript/lang/lexer.flex</tt>
 */
class Lexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SINGLE_QUOTE_STRING = 4;
  public static final int YYINITIAL = 0;
  public static final int DOUBLE_QUOTE_STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\16\2\0\1\1\22\0\1\15\1\14\1\20\1\17"+
    "\1\2\2\14\1\21\1\52\1\52\1\14\1\12\1\55\1\12\1\10"+
    "\1\14\1\4\11\3\1\14\1\54\1\14\1\14\1\14\1\14\1\0"+
    "\6\7\11\2\1\51\7\2\1\6\2\2\1\53\1\22\1\53\1\0"+
    "\1\50\1\0\1\34\1\42\1\37\1\44\1\11\1\26\1\47\1\40"+
    "\1\25\1\2\1\43\1\27\1\24\1\35\1\41\1\45\1\2\1\32"+
    "\1\30\1\31\1\33\1\46\1\13\1\5\1\36\1\2\1\23\1\14"+
    "\1\23\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\2\4\1\5\1\3\1\6"+
    "\1\3\1\2\1\7\1\10\1\11\1\12\20\3\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\1\1\17"+
    "\1\1\3\0\5\3\1\0\1\3\3\22\17\3\1\22"+
    "\4\3\1\22\2\3\1\23\3\3\1\24\1\25\2\4"+
    "\1\0\1\4\104\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\212\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\212\0\212"+
    "\0\212\0\u0256\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a"+
    "\0\u0398\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da"+
    "\0\u0508\0\212\0\212\0\212\0\212\0\u0536\0\212\0\212"+
    "\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6"+
    "\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c\0\346\0\u07ba\0\u07e8"+
    "\0\u0816\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u092a\0\u0958"+
    "\0\u0986\0\u09b4\0\u09e2\0\u0a10\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8"+
    "\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a\0\346"+
    "\0\u0c38\0\u0c66\0\u0c94\0\212\0\212\0\u0cc2\0\u0cf0\0\u0cf0"+
    "\0\u064a\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32"+
    "\0\u0ac8\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4"+
    "\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\u1226\0\u1254"+
    "\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4"+
    "\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506\0\u1534"+
    "\0\u1562\0\u1590\0\u15be\0\u0bae\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6"+
    "\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\3\6\1\11\1\12"+
    "\1\13\1\14\1\13\2\15\1\16\1\17\1\20\1\4"+
    "\1\21\1\6\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\6\1\35\1\36"+
    "\1\6\1\37\1\6\1\40\1\6\1\41\1\6\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\14\46\1\47\1\46"+
    "\1\50\1\46\1\51\33\46\1\52\1\47\14\52\1\47"+
    "\2\52\1\50\1\53\33\52\57\0\1\5\13\0\2\5"+
    "\41\0\6\6\1\0\1\6\1\0\1\6\10\0\26\6"+
    "\7\0\2\7\3\0\1\54\1\55\47\0\2\7\2\56"+
    "\1\0\1\54\1\55\46\0\3\6\1\57\2\6\1\0"+
    "\1\6\1\0\1\6\10\0\3\6\1\60\5\6\1\61"+
    "\14\6\16\0\1\13\1\0\1\13\43\0\6\6\1\0"+
    "\1\6\1\0\1\6\10\0\1\6\1\62\12\6\1\63"+
    "\11\6\5\0\1\5\13\0\1\15\1\5\1\16\36\0"+
    "\16\16\1\64\37\16\2\0\6\6\1\0\1\6\1\0"+
    "\1\6\10\0\1\65\1\6\1\66\1\6\1\67\4\6"+
    "\1\70\14\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\1\6\1\71\5\6\1\72\1\73\4\6\1\74"+
    "\10\6\6\0\6\6\1\0\1\75\1\0\1\6\10\0"+
    "\26\6\6\0\6\6\1\0\1\6\1\0\1\76\10\0"+
    "\7\6\1\77\16\6\6\0\6\6\1\0\1\6\1\0"+
    "\1\6\10\0\6\6\1\100\3\6\1\101\1\6\1\102"+
    "\11\6\6\0\6\6\1\0\1\103\1\0\1\6\10\0"+
    "\26\6\6\0\6\6\1\0\1\6\1\0\1\6\10\0"+
    "\11\6\1\104\14\6\6\0\6\6\1\0\1\6\1\0"+
    "\1\6\10\0\11\6\1\105\14\6\6\0\6\6\1\0"+
    "\1\106\1\0\1\6\10\0\10\6\1\107\4\6\1\110"+
    "\10\6\6\0\6\6\1\0\1\111\1\0\1\6\10\0"+
    "\26\6\6\0\6\6\1\0\1\6\1\0\1\6\10\0"+
    "\3\6\1\112\4\6\1\113\4\6\1\114\10\6\6\0"+
    "\6\6\1\0\1\6\1\0\1\6\10\0\2\6\1\115"+
    "\3\6\1\66\2\6\1\66\14\6\6\0\6\6\1\0"+
    "\1\6\1\0\1\6\10\0\6\6\1\116\3\6\1\66"+
    "\13\6\6\0\6\6\1\0\1\117\1\0\1\6\10\0"+
    "\15\6\1\120\10\6\6\0\6\6\1\0\1\6\1\0"+
    "\1\6\10\0\10\6\1\121\4\6\1\122\10\6\6\0"+
    "\6\6\1\0\1\6\1\0\1\6\10\0\24\6\1\123"+
    "\1\6\4\0\1\46\1\0\14\46\1\0\1\46\1\0"+
    "\1\46\1\0\33\46\16\124\1\0\1\124\1\125\1\124"+
    "\1\125\33\124\1\52\1\0\14\52\1\0\2\52\2\0"+
    "\33\52\16\124\1\0\2\124\2\125\33\124\3\0\2\126"+
    "\54\0\2\127\5\0\1\130\46\0\2\131\2\0\1\131"+
    "\1\0\1\131\14\0\1\131\5\0\1\131\2\0\1\131"+
    "\2\0\1\131\1\0\1\131\13\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\5\6\1\132\13\6\1\133\4\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\4\6"+
    "\1\134\21\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\7\6\1\135\16\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\5\6\1\136\20\6\6\0\6\6"+
    "\1\0\1\137\1\0\1\6\10\0\1\6\1\140\24\6"+
    "\21\0\1\64\1\0\1\16\40\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\21\6\1\133\4\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\11\6\1\141\14\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\4\6"+
    "\1\142\21\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\11\6\1\143\14\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\11\6\1\144\14\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\3\6\1\60\22\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\6\6"+
    "\1\66\17\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\5\6\1\120\20\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\1\6\1\145\24\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\21\6\1\146\4\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\7\6"+
    "\1\134\2\6\1\66\13\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\21\6\1\147\4\6\6\0\6\6"+
    "\1\0\1\150\1\0\1\6\10\0\6\6\1\151\17\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\5\6"+
    "\1\152\20\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\3\6\1\153\22\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\20\6\1\66\5\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\66\10\0\26\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\5\6\1\154\20\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\5\6"+
    "\1\66\20\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\4\6\1\66\21\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\10\6\1\155\15\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\4\6\1\156\1\157"+
    "\20\6\6\0\6\6\1\0\1\6\1\0\1\6\10\0"+
    "\11\6\1\160\14\6\6\0\6\6\1\0\1\6\1\0"+
    "\1\6\10\0\2\6\1\66\23\6\6\0\6\6\1\0"+
    "\1\161\1\0\1\6\10\0\26\6\6\0\6\6\1\0"+
    "\1\6\1\0\1\6\10\0\2\6\1\162\1\163\12\6"+
    "\1\164\7\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\6\6\1\120\17\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\1\6\1\165\24\6\6\0\6\6"+
    "\1\0\1\166\1\0\1\6\10\0\14\6\1\167\11\6"+
    "\7\0\2\126\4\0\1\55\47\0\2\127\53\0\6\6"+
    "\1\0\1\170\1\0\1\6\10\0\26\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\15\6\1\171\10\6"+
    "\6\0\6\6\1\0\1\66\1\0\1\6\10\0\26\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\1\120"+
    "\25\6\6\0\6\6\1\0\1\6\1\0\1\6\10\0"+
    "\14\6\1\120\11\6\6\0\6\6\1\0\1\6\1\0"+
    "\1\6\10\0\6\6\1\134\2\6\1\66\14\6\6\0"+
    "\6\6\1\0\1\6\1\0\1\6\10\0\3\6\1\134"+
    "\22\6\6\0\6\6\1\0\1\6\1\0\1\6\10\0"+
    "\5\6\1\172\20\6\6\0\6\6\1\0\1\6\1\0"+
    "\1\6\10\0\10\6\1\173\15\6\6\0\6\6\1\0"+
    "\1\6\1\0\1\6\10\0\13\6\1\174\12\6\6\0"+
    "\6\6\1\0\1\6\1\0\1\6\10\0\5\6\1\157"+
    "\20\6\6\0\6\6\1\0\1\74\1\0\1\6\10\0"+
    "\26\6\6\0\6\6\1\0\1\175\1\0\1\6\10\0"+
    "\26\6\6\0\6\6\1\0\1\6\1\0\1\6\10\0"+
    "\11\6\1\66\14\6\6\0\6\6\1\0\1\6\1\0"+
    "\1\6\10\0\15\6\1\106\10\6\6\0\6\6\1\0"+
    "\1\6\1\0\1\6\10\0\7\6\1\176\16\6\6\0"+
    "\6\6\1\0\1\155\1\0\1\6\10\0\26\6\6\0"+
    "\6\6\1\0\1\6\1\0\1\6\10\0\1\6\1\177"+
    "\24\6\6\0\6\6\1\0\1\6\1\0\1\6\10\0"+
    "\4\6\1\111\21\6\6\0\6\6\1\0\1\120\1\0"+
    "\1\6\10\0\26\6\6\0\6\6\1\0\1\6\1\0"+
    "\1\6\10\0\13\6\1\200\12\6\6\0\6\6\1\0"+
    "\1\6\1\0\1\6\10\0\4\6\1\75\1\201\20\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\10\6"+
    "\1\202\15\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\10\6\1\203\15\6\6\0\6\6\1\0\1\204"+
    "\1\0\1\6\10\0\26\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\7\6\1\205\16\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\20\6\1\120\5\6"+
    "\6\0\3\6\1\206\2\6\1\0\1\6\1\0\1\6"+
    "\10\0\26\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\10\6\1\207\15\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\11\6\1\210\14\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\6\6\1\75\17\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\10\6"+
    "\1\211\15\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\3\6\1\212\22\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\5\6\1\213\20\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\15\6\1\214\10\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\6\6"+
    "\1\150\17\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\22\6\1\156\3\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\14\6\1\66\11\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\1\6\1\215\24\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\17\6"+
    "\1\66\6\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\7\6\1\216\16\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\5\6\1\134\20\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\23\6\1\217\2\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\5\6"+
    "\1\220\20\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\4\6\1\221\21\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\20\6\1\111\5\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\11\6\1\222\14\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\3\6"+
    "\1\223\22\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\1\6\1\224\24\6\6\0\6\6\1\0\1\6"+
    "\1\0\1\6\10\0\11\6\1\225\14\6\6\0\6\6"+
    "\1\0\1\6\1\0\1\6\10\0\3\6\1\75\22\6"+
    "\6\0\6\6\1\0\1\6\1\0\1\6\10\0\23\6"+
    "\1\226\2\6\6\0\6\6\1\0\1\227\1\0\1\6"+
    "\10\0\26\6\6\0\6\6\1\0\1\6\1\0\1\6"+
    "\10\0\25\6\1\230\6\0\6\6\1\0\1\6\1\0"+
    "\1\6\10\0\13\6\1\147\12\6\6\0\6\6\1\0"+
    "\1\6\1\0\1\6\10\0\12\6\1\66\13\6\6\0"+
    "\6\6\1\0\1\6\1\0\1\6\10\0\15\6\1\231"+
    "\10\6\6\0\6\6\1\0\1\6\1\0\1\6\10\0"+
    "\7\6\1\134\16\6\6\0\6\6\1\0\1\121\1\0"+
    "\1\6\10\0\26\6\6\0\6\6\1\0\1\6\1\0"+
    "\1\6\10\0\11\6\1\232\14\6\6\0\6\6\1\0"+
    "\1\6\1\0\1\6\10\0\6\6\1\233\17\6\6\0"+
    "\6\6\1\0\1\6\1\0\1\6\10\0\11\6\1\120"+
    "\14\6\6\0\6\6\1\0\1\6\1\0\1\6\10\0"+
    "\20\6\1\234\5\6\6\0\6\6\1\0\1\6\1\0"+
    "\1\6\10\0\15\6\1\235\10\6\6\0\6\6\1\0"+
    "\1\6\1\0\1\6\10\0\4\6\1\120\21\6\6\0"+
    "\6\6\1\0\1\6\1\0\1\6\10\0\21\6\1\120"+
    "\4\6\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6394];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\4\1\1\11\5\1\3\11\20\1\4\11"+
    "\1\1\2\11\3\1\3\0\5\1\1\0\37\1\2\11"+
    "\2\1\1\0\105\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[157];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null; 
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return Tokens.BRACES;
          }
        case 22: break;
        case 9: 
          { yybegin(SINGLE_QUOTE_STRING); return Tokens.STRING;
          }
        case 23: break;
        case 4: 
          { return Tokens.NUMBER;
          }
        case 24: break;
        case 17: 
          { yybegin(YYINITIAL); return Tokens.STRING;
          }
        case 25: break;
        case 7: 
          { return Tokens.COMMENT;
          }
        case 26: break;
        case 18: 
          { return Tokens.KEYWORD;
          }
        case 27: break;
        case 14: 
          { return Tokens.COMMA;
          }
        case 28: break;
        case 20: 
          { return Tokens.BAD_CHARACTER;
          }
        case 29: break;
        case 11: 
          { return Tokens.PARENTHESIS;
          }
        case 30: break;
        case 5: 
          { return Tokens.DOT;
          }
        case 31: break;
        case 2: 
          { return Tokens.WHITESPACE;
          }
        case 32: break;
        case 16: 
          { return Tokens.LINE_TERMINATOR;
          }
        case 33: break;
        case 3: 
          { return Tokens.IDENTIFIER;
          }
        case 34: break;
        case 6: 
          { return Tokens.OPERATOR;
          }
        case 35: break;
        case 1: 
          { yybegin(YYINITIAL);   return Tokens.BAD_CHARACTER;
          }
        case 36: break;
        case 19: 
          { return Tokens.RESERVED_WORD;
          }
        case 37: break;
        case 8: 
          { yybegin(DOUBLE_QUOTE_STRING); return Tokens.STRING;
          }
        case 38: break;
        case 12: 
          { return Tokens.BRACKETS;
          }
        case 39: break;
        case 15: 
          { return Tokens.STRING;
          }
        case 40: break;
        case 21: 
          { return Tokens.STRING_LITERAL;
          }
        case 41: break;
        case 13: 
          { return Tokens.SEMI_COLON;
          }
        case 42: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
